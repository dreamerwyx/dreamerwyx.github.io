<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker搭建ELK日志分析系统</title>
      <link href="/posts/2295805762.html"/>
      <url>/posts/2295805762.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、ELK-是什么？"><a href="#一、ELK-是什么？" class="headerlink" title="一、ELK 是什么？"></a>一、ELK 是什么？</h2><p>本篇文章主要是手把手教你搭建 ELK 实时日志分析平台，那么，ELK 到底是什么呢？<br>ELK 是三个开源框架的简写，分别是：<code>Elasticsearch</code>、<code>Logstash</code>、<code>Kibana</code> 。</p><p>| 框架 | 简介 | 作用 |<br>| — | ———– |—— |<br>| <code>Elasticsearch</code> | 开源分布式搜索引擎，提供存储、分析、搜索功能。特点：分布式、基于reasful风格、支持海量高并发的准实时搜索场景、稳定、可靠、快速、使用方便等。|接收搜集的海量结构化日志数据，并提供给Kibana查询分析。|<br>| <code>Logstash</code> | 开源日志搜集、分析、过滤框架，支持多种数据输入输出方式。|用于收集日志，对日志进行过滤形成结构化数据，并转发到Elasticsearch中。|<br>| <code>Kibana</code> | 开源日志报表系统，对Elasticsearch以及Logstash有良好的web页面支持。|对Elasticsearch提供的数据进行分析展示。|  </p><p><img src="https://images.dreamerwyx.top/img/20230503-174728.jpeg"></p><p>Elasticsearch 的核心是搜索引擎，所以用户开始将其用于日志用例，并希望能够轻松地对日志进行采集和可视化。有鉴于此，Elastic 引入了强大的采集管道 Logstash 和灵活的可视化工具 Kibana。</p><h2 id="二、基础配置"><a href="#二、基础配置" class="headerlink" title="二、基础配置"></a>二、基础配置</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> vim /etc/security/limits.conf<span class="token comment" spellcheck="true"># 增加或者修改下面的字段</span>*       soft nofile 65536*       hard nofile 65536*       soft nproc 4096root    soft nproc unlimited</code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/sysctl.conf<span class="token comment" spellcheck="true"># 增加或修改下面的字段</span>vm.max_map_count<span class="token operator">=</span>262144</code></pre><p>上面的修改是不会自动生效的，需要使上面的配置生效。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> sysctl -pvm.max_map_count <span class="token operator">=</span> 262144</code></pre><h2 id="三、安装部署"><a href="#三、安装部署" class="headerlink" title="三、安装部署"></a>三、安装部署</h2><blockquote><p>docker环境配置思路：</p></blockquote><ul><li>第一次运行，COPY docker中的配置文件到本地，复制完删除这些容器。<br>然后在本地根据具体情况来修改这些配置文件。</li><li>第二次运行，把本地修改好的配置文件挂载到容器内。<blockquote><p>注意Elasticsearch，kibana，logstash<code>软件版本需要一致</code>，要不然可能会出现读取数据失败。</p></blockquote></li></ul><h3 id="1-创建docker网络"><a href="#1-创建docker网络" class="headerlink" title="1.创建docker网络"></a>1.创建docker网络</h3><pre class=" language-bash"><code class="language-bash">$ docker network create -d bridge elastic</code></pre><h3 id="2-Elasticsearch"><a href="#2-Elasticsearch" class="headerlink" title="2.Elasticsearch"></a>2.Elasticsearch</h3><h4 id="获取默认配置文件"><a href="#获取默认配置文件" class="headerlink" title="获取默认配置文件"></a>获取默认配置文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -e "discovery.type=single-node"  使 Elasticsearch 以单节点模式运行</span><span class="token comment" spellcheck="true"># -e ES_JAVA_OPTS="-Xms8g -Xmx8g"  Elasticsearch 进程使用 8GB 的堆内存来运行</span>docker run -it \    -d \    -p 9200:9200 \    -p 9300:9300 \    --name es01 \    --net elastic \    -e ES_JAVA_OPTS<span class="token operator">=</span><span class="token string">"-Xms8g -Xmx8g"</span> \    -e <span class="token string">"discovery.type=single-node"</span> \    -e LANG<span class="token operator">=</span>C.UTF-8 \    -e LC_ALL<span class="token operator">=</span>C.UTF-8 \    elasticsearch:8.3.0</code></pre><p>在第一次运行<code>Elasticsearch</code>的时候会打印登录密码和用于<code>Kibana</code>的令牌，具体内容就是下面的这样，token只有30分钟有效期：<br><img src="/!%5B%5D(https:/images.dreamerwyx.top/img/202305031645905.png)"><br>其实看没看到都不重要，这一步的主要目的是获取默认的配置文件。密码和令牌都可以重置。<br>创建<code>Elasticsearch</code>挂载目录，把容器内的配置文件copy出来，在本地做好配置修改后再映射到容器。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /home/<span class="token variable">$USER</span>/elk/elasticsearch<span class="token function">sudo</span> <span class="token function">chown</span> -R 1000:1000 /home/<span class="token variable">$USER</span>/elk/elasticsearchdocker <span class="token function">cp</span> es01:/usr/share/elasticsearch/config /home/<span class="token variable">$USER</span>/elk/elasticsearch     docker <span class="token function">cp</span> es01:/usr/share/elasticsearch/data /home/<span class="token variable">$USER</span>/elk/elasticsearchdocker <span class="token function">cp</span> es01:/usr/share/elasticsearch/plugins /home/<span class="token variable">$USER</span>/elk/elasticsearchdocker <span class="token function">cp</span> es01:/usr/share/elasticsearch/logs /home/<span class="token variable">$USER</span>/elk/elasticsearchdocker <span class="token function">rm</span> -f es01</code></pre><h4 id="修改本地配置文件"><a href="#修改本地配置文件" class="headerlink" title="修改本地配置文件"></a>修改本地配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /home/<span class="token variable">$USER</span>/elk/elasticsearch/config/elasticsearch.yml<span class="token comment" spellcheck="true"># 增加</span>xpack.monitoring.collection.enabled: <span class="token boolean">true</span></code></pre><h4 id="第二次运行docker"><a href="#第二次运行docker" class="headerlink" title="第二次运行docker"></a>第二次运行docker</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    -p 9200:9200 \    -p 9300:9300 \    --name es01 \    --net elastic \    -e ES_JAVA_OPTS<span class="token operator">=</span><span class="token string">"-Xms8g -Xmx8g"</span> \    -e <span class="token string">"discovery.type=single-node"</span> \    -e LANG<span class="token operator">=</span>C.UTF-8 \    -e LC_ALL<span class="token operator">=</span>C.UTF-8 \    -v /home/<span class="token variable">$USER</span>/elk/elasticsearch/config:/usr/share/elasticsearch/config \    -v /home/<span class="token variable">$USER</span>/elk/elasticsearch/data:/usr/share/elasticsearch/data \    -v /home/<span class="token variable">$USER</span>/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins \    -v /home/<span class="token variable">$USER</span>/elk/elasticsearch/logs:/usr/share/elasticsearch/logs \    elasticsearch:8.3.0</code></pre><p>这时可以在浏览器输入<code>https://IP:9200</code>，输入信息登录，这样就成功了。</p><ul><li>默认用户名：elastic</li><li>密码：不知道没关系，看下面。<br><img src="https://images.dreamerwyx.top/img/202305031647390.png"><br><img src="https://images.dreamerwyx.top/img/202305031650024.png"></li></ul><h4 id="重置密码或令牌"><a href="#重置密码或令牌" class="headerlink" title="重置密码或令牌"></a>重置密码或令牌</h4><h5 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h5><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic</code></pre><h5 id="重置令牌（只有30分钟，有效期）"><a href="#重置令牌（只有30分钟，有效期）" class="headerlink" title="重置令牌（只有30分钟，有效期）"></a>重置令牌（只有30分钟，有效期）</h5><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it es01 /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana</code></pre><h3 id="3-Kibana"><a href="#3-Kibana" class="headerlink" title="3.Kibana"></a>3.Kibana</h3><blockquote><p>可以简单理解为Elasticsearch的可视化操作平台。</p></blockquote><h4 id="获取默认配置文件-1"><a href="#获取默认配置文件-1" class="headerlink" title="获取默认配置文件"></a>获取默认配置文件</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --restart<span class="token operator">=</span>always \    --log-driver json-file \    --log-opt max-size<span class="token operator">=</span>100m \    --log-opt max-file<span class="token operator">=</span>2 \    --name kib01 \    -p 5601:5601 \    --net elastic \    kibana:8.3.0</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /home/<span class="token variable">$USER</span>/elk/kibana<span class="token function">sudo</span> <span class="token function">chown</span> -R 1000:1000 /home/<span class="token variable">$USER</span>/elk/kibanadocker <span class="token function">cp</span> kib01:/usr/share/kibana/config /home/<span class="token variable">$USER</span>/elk/kibanadocker <span class="token function">cp</span> kib01:/usr/share/kibana/data /home/<span class="token variable">$USER</span>/elk/kibanadocker <span class="token function">cp</span> kib01:/usr/share/kibana/plugins /home/<span class="token variable">$USER</span>/elk/kibanadocker <span class="token function">cp</span> kib01:/usr/share/kibana/logs /home/<span class="token variable">$USER</span>/elk/kibanadocker <span class="token function">rm</span> -f kib01</code></pre><h4 id="修改本地配置文件-1"><a href="#修改本地配置文件-1" class="headerlink" title="修改本地配置文件"></a>修改本地配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /home/<span class="token variable">$USER</span>/elk/kibana/config/kibana.yml<span class="token comment" spellcheck="true"># 增加，kibana界面，汉化作用</span>i18n.locale: <span class="token string">"zh-CN"</span></code></pre><h4 id="第二次运行docker-1"><a href="#第二次运行docker-1" class="headerlink" title="第二次运行docker"></a>第二次运行docker</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --restart<span class="token operator">=</span>always \    --log-driver json-file \    --log-opt max-size<span class="token operator">=</span>100m \    --log-opt max-file<span class="token operator">=</span>2 \    --name kib01 \    -p 5601:5601 \    --net elastic \    -v /home/<span class="token variable">$USER</span>/elk/kibana/config:/usr/share/kibana/config \    -v /home/<span class="token variable">$USER</span>/elk/kibana/data:/usr/share/kibana/data \    -v /home/<span class="token variable">$USER</span>/elk/kibana/plugins:/usr/share/kibana/plugins \    -v /home/<span class="token variable">$USER</span>/elk/kibana/logs:/usr/share/kibana/logs \    kibana:8.3.0</code></pre><h4 id="通过kibana登录Elasticsearch"><a href="#通过kibana登录Elasticsearch" class="headerlink" title="通过kibana登录Elasticsearch"></a>通过kibana登录Elasticsearch</h4><p>第一次登录会有一个验证，需要输入<code>Elasticsearch</code>对<code>kibana</code>的<code>token</code>，然后kibana会有一个验证码。具体操作看下面：<br>首先打开kibana运行log:</p><pre class=" language-bash"><code class="language-bash">docker logs -f kib01</code></pre><p>这时可以在浏览器输入<code>https://IP:5601</code>，输入<code>token</code>（不知道没关系，看上面的重置令牌）：<br>这时可以看到kib01的运行log，先准备一下，接收验证码。<br>在第一次登录kibana并输入完<code>elasticsearch</code>的<code>token</code>之后需要一个验证码，会在上面的kibana log生成。<br>然后输入上面的验证码即可。（汉化后的kibana界面）:<br><img src="https://images.dreamerwyx.top/img/202305031654398.png"></p><blockquote><p>从此之后，就不怎么需要<code>https://IP:9200</code>这个端口登录<code>Elasticsearch</code>了。<br>换成<code>http://IP:5601</code>。<br>注意这两个地址，<code>9200</code>这个必须用<code>https</code>，<code>5601</code>这个用<code>http</code>。</p></blockquote><h4 id="修改Elasticsearch密码"><a href="#修改Elasticsearch密码" class="headerlink" title="修改Elasticsearch密码"></a>修改Elasticsearch密码</h4><p>原始密码以及工具重置的密码都是很给定的复杂密码，这里可以修改自定义密码:<br><img src="https://images.dreamerwyx.top/img/202305031652728.png"><br><img src="https://images.dreamerwyx.top/img/202305031653170.png"></p><h3 id="4-Logstash"><a href="#4-Logstash" class="headerlink" title="4.Logstash"></a>4.Logstash</h3><h4 id="获取默认配置文件-2"><a href="#获取默认配置文件-2" class="headerlink" title="获取默认配置文件"></a>获取默认配置文件</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --name logstash \    -p 9600:9600 \    -p 5044:5044 \    --net elastic \    logstash:8.3.0</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /home/<span class="token variable">$USER</span>/elk/logstash<span class="token function">sudo</span> <span class="token function">chown</span> -R 1000:1000 /home/<span class="token variable">$USER</span>/elk/logstashdocker <span class="token function">cp</span> logstash:/usr/share/logstash/config /home/<span class="token variable">$USER</span>/elk/logstashdocker <span class="token function">cp</span> logstash:/usr/share/logstash/pipeline /home/<span class="token variable">$USER</span>/elk/logstash<span class="token function">cp</span> -r /home/<span class="token variable">$USER</span>/elk/elasticsearch/config/certs /home/<span class="token variable">$USER</span>/elk/logstash/config/certsdocker <span class="token function">rm</span> -f logstash</code></pre><h4 id="修改本地配置文件-2"><a href="#修改本地配置文件-2" class="headerlink" title="修改本地配置文件"></a>修改本地配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /home/<span class="token variable">$USER</span>/elk/logstash/config/logstash.ymlhttp.host: <span class="token string">"0.0.0.0"</span>xpack.monitoring.enabled: <span class="token boolean">true</span>xpack.monitoring.elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"https://172.18.0.2:9200"</span> <span class="token punctuation">]</span>xpack.monitoring.elasticsearch.username: <span class="token string">"elastic"</span>xpack.monitoring.elasticsearch.password: <span class="token string">"your elastic passwd"</span>xpack.monitoring.elasticsearch.ssl.certificate_authority: <span class="token string">"/usr/share/logstash/config/certs/http_ca.crt"</span><span class="token comment" spellcheck="true">#xpack.monitoring.elasticsearch.ssl.ca_trusted_fingerprint: "af25d88b7d0c6aa9461f6a7adfcad92ff6c4821f2253b41f2c82be1398c82d73"</span></code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /home/<span class="token variable">$USER</span>/elk/logstash/pipeline/logstash.conf<span class="token comment" spellcheck="true"># logstash的config文件，可以认为分为三个部分：</span><span class="token comment" spellcheck="true"># input log输入源，可以指定一个路径，如：</span>input <span class="token punctuation">{</span>  <span class="token function">file</span> <span class="token punctuation">{</span>    path <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"/path/to/logs/dir1/*.log"</span>, <span class="token string">"/path/to/logs/dir2/*.log"</span> <span class="token punctuation">]</span>    start_position <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"beginning"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># beats：可选，即filebeat，端口5044</span>input <span class="token punctuation">{</span>  beats <span class="token punctuation">{</span>    port <span class="token operator">=</span><span class="token operator">></span> 5044  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># filter log过滤器</span>filter <span class="token punctuation">{</span>  <span class="token function">date</span> <span class="token punctuation">{</span>    match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"@timestamp"</span>, <span class="token string">"yyyy-MM-dd HH:mm:ss"</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  mutate <span class="token punctuation">{</span>    remove_field <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"@version"</span>, <span class="token string">"agent"</span>, <span class="token string">"cloud"</span>, <span class="token string">"host"</span>, <span class="token string">"input"</span>, <span class="token string">"log"</span>, <span class="token string">"tags"</span>, <span class="token string">"_index"</span>, <span class="token string">"_source"</span>, <span class="token string">"ecs"</span>, <span class="token string">"event"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># output 输出指向</span>output <span class="token punctuation">{</span>  elasticsearch <span class="token punctuation">{</span>    hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"https://172.18.0.2:9200"</span><span class="token punctuation">]</span>    index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"server-%{+YYYY.MM.dd}"</span>    ssl <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>    ssl_certificate_verification <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span>    cacert <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"/usr/share/logstash/config/certs/http_ca.crt"</span>    ca_trusted_fingerprint <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"af25d88b7d0c6aa9461f6a7adfcad92ff6c4821f2253b41f2c82be1398c82d73"</span>    user <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"elastic"</span>    password <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"your elastic passwd"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第二次运行docker-2"><a href="#第二次运行docker-2" class="headerlink" title="第二次运行docker"></a>第二次运行docker</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --name logstash \    -p 9600:9600 \    -p 5044:5044 \    --net elastic \    -v /home/<span class="token variable">$USER</span>/elk/test_log:/usr/share/logstash/target \    -v /home/<span class="token variable">$USER</span>/elk/logstash/config:/usr/share/logstash/config \    -v /home/<span class="token variable">$USER</span>/elk/logstash/pipeline:/usr/share/logstash/pipeline \    logstash:8.3.0</code></pre><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><p>在上面配置的log 路径哪里放好log，登录<code>Kibanna</code>（<code>https://IP:5601</code>），查看Stack Management  -&gt;索引管理<br><img src="https://images.dreamerwyx.top/img/202305031656289.png"><br><img src="https://images.dreamerwyx.top/img/202305031656522.png"><br>在索引管理页面看到新增的索引，这样logstash基本配置就成功了。<br> <img src="https://images.dreamerwyx.top/img/202305031657701.png"><br>有了索引之后，进入Discover:<br> <img src="https://images.dreamerwyx.top/img/202305031658560.png"><br> <img src="https://images.dreamerwyx.top/img/202305031658972.png"><br> <img src="https://images.dreamerwyx.top/img/202305031658845.png"><br>创建后就可以看到log信息了：<br> <img src="https://images.dreamerwyx.top/img/202305031659027.png"><br>具体的logstash整合、解析规则还要看具体需求。</p><h3 id="5-filebeat（可选，当log较多时，Logstash可能会性能不足）"><a href="#5-filebeat（可选，当log较多时，Logstash可能会性能不足）" class="headerlink" title="5.filebeat（可选，当log较多时，Logstash可能会性能不足）"></a>5.filebeat（可选，当log较多时，Logstash可能会性能不足）</h3><h4 id="获取默认配置文件-3"><a href="#获取默认配置文件-3" class="headerlink" title="获取默认配置文件"></a>获取默认配置文件</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --name filebeat \    --network host \    -e TZ<span class="token operator">=</span>Asia/Shanghai \    filebeat:8.3.0 \    filebeat -e  -c /usr/share/filebeat/filebeat.yml</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /home/<span class="token variable">$USER</span>/elk/filebeat<span class="token function">sudo</span> <span class="token function">chown</span> -R 1000:1000 /home/<span class="token variable">$USER</span>/elk/filebeatdocker <span class="token function">cp</span> filebeat:/usr/share/filebeat/filebeat.yml /home/<span class="token variable">$USER</span>/elk/filebeatdocker <span class="token function">cp</span> filebeat:/usr/share/filebeat/data /home/<span class="token variable">$USER</span>/elk/filebeatdocker <span class="token function">cp</span> filebeat:/usr/share/filebeat/logs /home/<span class="token variable">$USER</span>/elk/filebeatdocker <span class="token function">rm</span> -f filebeat</code></pre><h4 id="修改本地配置文件-3"><a href="#修改本地配置文件-3" class="headerlink" title="修改本地配置文件"></a>修改本地配置文件</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> /home/<span class="token variable">$USER</span>/elk/filebeat/filebeat.ymlfilebeat.config:  modules:    path: <span class="token variable">${path.config}</span>/modules.d/*.yml    reload.enabled: <span class="token boolean">false</span>processors:  - add_cloud_metadata: ~  - add_docker_metadata: ~output.logstash:  enabled: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># The Logstash hosts</span>  hosts: <span class="token punctuation">[</span><span class="token string">"172.18.0.4:5044"</span><span class="token punctuation">]</span>filebeat.inputs:- type: log  enabled: <span class="token boolean">true</span>  paths:    - /usr/share/filebeat/target/*.log    - /usr/share/filebeat/target/elk/*.log  scan_frequency: 10s  exclude_lines: <span class="token punctuation">[</span><span class="token string">'HEAD'</span><span class="token punctuation">]</span>  exclude_lines: <span class="token punctuation">[</span><span class="token string">'HTTP/1.1'</span><span class="token punctuation">]</span>  multiline.pattern: <span class="token string">'^[[:space:]]+(at|\.{3})\b|Exception|捕获异常'</span>  multiline.negate: <span class="token boolean">false</span>  multiline.match: after</code></pre><h4 id="第二次运行docker-3"><a href="#第二次运行docker-3" class="headerlink" title="第二次运行docker"></a>第二次运行docker</h4><pre class=" language-bash"><code class="language-bash">docker run -it \    -d \    --name filebeat \    --network host \    -e TZ<span class="token operator">=</span>Asia/Shanghai \    -v /home/<span class="token variable">$USER</span>/elk:/usr/share/filebeat/target \    -v /home/<span class="token variable">$USER</span>/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml \    -v /home/<span class="token variable">$USER</span>/elk/filebeat/data:/usr/share/filebeat/data \    -v /home/<span class="token variable">$USER</span>/elk/filebeat/logs:/usr/share/filebeat/logs \    filebeat:8.3.0 \    filebeat -e  -c /usr/share/filebeat/filebeat.yml</code></pre><h4 id="测试一下-1"><a href="#测试一下-1" class="headerlink" title="测试一下"></a>测试一下</h4><p>和上面Logstash的测试方法一样。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作</title>
      <link href="/posts/807237865.html"/>
      <url>/posts/807237865.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、-Git配置"><a href="#一、-Git配置" class="headerlink" title="一、 Git配置"></a>一、 Git配置</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt inatsll <span class="token function">git</span></code></pre><h3 id="2-绑定git仓库"><a href="#2-绑定git仓库" class="headerlink" title="2.绑定git仓库"></a>2.绑定git仓库</h3><p>本地命令行生成密钥，替换成自己邮箱，然后一路回车。</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span>$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub </code></pre><p>将生成的公钥打印出来复制，将这串文本复制粘贴到Gitlab的profile/keys中。</p><h4 id="Add-key"><a href="#Add-key" class="headerlink" title="Add key"></a>Add key</h4><p>输入命令检查是否绑定成功,如果出现Welcome to GitLab, @xxx!!则绑定成功。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@gitlab.xxx.com</code></pre><h3 id="3-配置用户名和邮箱："><a href="#3-配置用户名和邮箱：" class="headerlink" title="3.配置用户名和邮箱："></a>3.配置用户名和邮箱：</h3><p>查看配置信息，一开始为空:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --list</code></pre><p>全局配置，对所有代码库生效:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"你的名字"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"你的邮箱"</span></code></pre><p>局部配置，只对当前的代码库有效:  </p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --local user.name <span class="token string">"你的名字"</span>$ <span class="token function">git</span> config --local user.email <span class="token string">"你的邮箱"</span></code></pre><p>配置后，远程仓库提交的commit里对应的用户即为 <code>user.name</code>。</p><h2 id="二、Git基本操作"><a href="#二、Git基本操作" class="headerlink" title="二、Git基本操作"></a>二、Git基本操作</h2><h3 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1.创建版本库"></a>1.创建版本库</h3><p>创建版本库有两种方式，一种是将本地的文件夹直接变成一个git仓库，另一种是直接将远程的仓库克隆到本地。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init <span class="token comment" spellcheck="true"># 将本地文件夹变为一个git仓库</span>$ <span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">></span> <span class="token comment" spellcheck="true"># 将远程仓库克隆到本地</span></code></pre><p><code>&lt;url&gt;</code> 分为两种类型:<br><code>git@xxx.git</code><br><code>https:xxx.git</code><br>其中https的链接在后续操作中需要多次输入账户名，密码。</p><h3 id="2-修改与提交操作"><a href="#2-修改与提交操作" class="headerlink" title="2.修改与提交操作"></a>2.修改与提交操作</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment" spellcheck="true"># 将单个文件从工作区添加到暂存区</span>$ <span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true"># 将所有文件添加到暂存区</span>$ <span class="token function">git</span> commit -m <span class="token string">"messenge"</span> <span class="token comment" spellcheck="true"># 将暂存区文件提交到本地仓库</span>$ <span class="token function">git</span> status <span class="token comment" spellcheck="true"># 查看工作区状态，显示有变更的文件。</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token comment" spellcheck="true"># 比较文件的不同，即暂存区和工作区的差异。</span></code></pre><h3 id="3-远程操作"><a href="#3-远程操作" class="headerlink" title="3.远程操作"></a>3.远程操作</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> push origin master <span class="token comment" spellcheck="true"># 将本地的master分支推送到远程对应的分支</span>$ <span class="token function">git</span> pull  <span class="token comment" spellcheck="true"># 下载远程代码并合并，相当于git fetch + git pull</span>$ <span class="token function">git</span> fetch   <span class="token comment" spellcheck="true"># 从远程获取代码库，但不进行合并操作</span>$ <span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>url<span class="token operator">></span> <span class="token comment" spellcheck="true"># 将远程仓库与本地仓库关联起来</span>$ <span class="token function">git</span> remote -v <span class="token comment" spellcheck="true"># 查看远程库信息</span></code></pre><h3 id="4-合并最近两次commit"><a href="#4-合并最近两次commit" class="headerlink" title="4.合并最近两次commit"></a>4.合并最近两次commit</h3><p>一次<code>commit</code>的时候，发现有段代码没写好，就补了一句以后再<code>commit</code>了一遍，这样就有两条<code>commit</code>语句了。应该把之后补的那条合并到前面去。<br>这时候就需要<code>git rebase</code>语句：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> rebase -i HEAD~2</code></pre><p>当前我们只要知道 <code>pick</code> 和 <code>squash</code> 这两个命令即可。</p><ul><li>pick 的意思是要会执行这个 commit</li><li>squash 的意思是这个 commit 会被合并到前一个commit<br>(<img src="https://images.dreamerwyx.top/img/%E6%88%AA%E5%B1%8F2023-05-03%2016.32.29.png">)<br>根据提示，把第二个“pick”改成“squash”，这样就可以把第二个commit合并到到第一个里，修改并保存后会自动进入下一个页面（这里忘记截图了），<br>然后修改commit信息，保存即可，此时查看<code>git log</code>，commit已经改变了。</li></ul><h3 id="5-撤销与回退操作"><a href="#5-撤销与回退操作" class="headerlink" title="5.撤销与回退操作"></a>5.撤销与回退操作</h3><h4 id="①撤销操作："><a href="#①撤销操作：" class="headerlink" title="①撤销操作："></a>①撤销操作：</h4><p>当修改了工作区/暂存区的文件，但是还没有commit时，想要撤销之前的操作：</p><h5 id="场景1：当你改乱了工作区某个文件的内容，但还没有add到暂存区"><a href="#场景1：当你改乱了工作区某个文件的内容，但还没有add到暂存区" class="headerlink" title="场景1：当你改乱了工作区某个文件的内容，但还没有add到暂存区"></a>场景1：当你改乱了工作区某个文件的内容，但还没有add到暂存区</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment" spellcheck="true"># 撤销工作区的某个文件到和暂存区一样的状态</span></code></pre><h5 id="场景2：当乱改了工作区某个文件的内容，并且git-add到了暂存区"><a href="#场景2：当乱改了工作区某个文件的内容，并且git-add到了暂存区" class="headerlink" title="场景2：当乱改了工作区某个文件的内容，并且git add到了暂存区"></a>场景2：当乱改了工作区某个文件的内容，并且git add到了暂存区</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment" spellcheck="true"># 第1步，将暂存区的文件修改撤销掉</span>$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token comment" spellcheck="true"># 第2步，将工作区的文件修改撤销掉</span></code></pre><h5 id="场景3：乱改了很多文件，想回到最新一次提交时的状态"><a href="#场景3：乱改了很多文件，想回到最新一次提交时的状态" class="headerlink" title="场景3：乱改了很多文件，想回到最新一次提交时的状态"></a>场景3：乱改了很多文件，想回到最新一次提交时的状态</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard HEAD <span class="token comment" spellcheck="true"># 撤销工作区中所有未提交文件的修改内容</span></code></pre><h4 id="②回退操作："><a href="#②回退操作：" class="headerlink" title="②回退操作："></a>②回退操作：</h4><p>当已经进行了commit操作，需要回退到之前的版本：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard HEAD^ <span class="token comment" spellcheck="true"># 回退到上次提交的状态</span>$ <span class="token function">git</span> reset --hard HEAD~n <span class="token comment" spellcheck="true"># 回退到n个版本前的状态</span>$ <span class="token function">git</span> reset --hard HEAD commitid <span class="token comment" spellcheck="true"># 回退到某一个commitid的状态</span>$ <span class="token function">git</span> reset --soft HEAD commitid <span class="token comment" spellcheck="true"># 回退到某一个commitid的状态，并且保留暂存区的内容</span>$ <span class="token function">git</span> reset --mixed<span class="token punctuation">(</span>默认<span class="token punctuation">)</span> HEAD commitid <span class="token comment" spellcheck="true"># 回退到某一个commitid的状态，并且保留工作区的内容</span></code></pre><h4 id="③找回被误删的分支："><a href="#③找回被误删的分支：" class="headerlink" title="③找回被误删的分支："></a>③找回被误删的分支：</h4><h5 id="第一步，历史操作记录"><a href="#第一步，历史操作记录" class="headerlink" title="第一步，历史操作记录"></a>第一步，历史操作记录</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> reflog show --date<span class="token operator">=</span>iso<span class="token comment" spellcheck="true"># git reflog用来记录你的每一次命令。</span><span class="token comment" spellcheck="true"># --date=iso 表示以标准时间显示，这里要注意的是不能用git log。</span><span class="token comment" spellcheck="true"># git log 命令显示从最近到最远的提交日志，当分支被删掉就找不到记录了。</span></code></pre><p>从每一次的命令里，找到你想要恢复的那次commit,也就是你删除的分支的commit。</p><h5 id="第二步，在历史操作记录中找到具体commitId"><a href="#第二步，在历史操作记录中找到具体commitId" class="headerlink" title="第二步，在历史操作记录中找到具体commitId"></a>第二步，在历史操作记录中找到具体commitId</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span>  show  a02ba0262<span class="token comment" spellcheck="true"># 查看commitId对应的提交详情，确认是否想要恢复</span></code></pre><h5 id="第三步，根据commitId恢复被删除的分支到本地"><a href="#第三步，根据commitId恢复被删除的分支到本地" class="headerlink" title="第三步，根据commitId恢复被删除的分支到本地"></a>第三步，根据commitId恢复被删除的分支到本地</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b  <span class="token operator">&lt;</span>name<span class="token operator">></span>  commitId</code></pre><h2 id="三、Git分支管理"><a href="#三、Git分支管理" class="headerlink" title="三、Git分支管理"></a>三、Git分支管理</h2><p>git的最强大之处就在于分支管理了，具体有两种应用场景：</p><h3 id="1-多人协作："><a href="#1-多人协作：" class="headerlink" title="1.多人协作："></a>1.多人协作：</h3><p>每个人都基于主分支创建一个自己的分支，在分支上进行开发，然后再不断将写好的代码合并到主分支。</p><h3 id="2-自己修复bug-x2F-增加feature："><a href="#2-自己修复bug-x2F-增加feature：" class="headerlink" title="2.自己修复bug/增加feature："></a>2.自己修复bug/增加feature：</h3><p>创建一个bug分支或者feature分支，写好代码后合并到自己的分支然后删除<code>bug/feature</code>分支。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 创建分支</span>$ <span class="token function">git</span> checkout <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 切换到某个分支</span>$ <span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 创建并切换到新分支，相当于同时执行了以上两个命令</span>$ <span class="token function">git</span> merge <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 合并某个分支到当前分支中，默认fast forward</span>$ <span class="token function">git</span> branch -a <span class="token comment" spellcheck="true"># 查看所有分支</span>$ <span class="token function">git</span> branch -d <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 删除分支</span>$ <span class="token function">git</span> branch -D <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true"># 强行删除分支</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux管理Python版本</title>
      <link href="/posts/398695014.html"/>
      <url>/posts/398695014.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不同的脚本，项目需要用的Python版本不一定是相同的。那怎么让多个版本共存，并且可以任意切换呢？</p><p>下面介绍了两种方法，<code>Ubuntu</code>应该是两种都适用的，<code>MacOS</code>实测适用方法二。</p><h2 id="方法一：update-alternatives"><a href="#方法一：update-alternatives" class="headerlink" title="方法一：update-alternatives"></a>方法一：update-alternatives</h2><p><code>update-alternatives</code>命令用于处理 Linux 系统中软件版本的切换，使其多版本共存。（update-alternatives可以管理很多软件的版本切换，这里介绍下以python为例）<br>使用这种方法管理python版本需要和apt一起使用。<br>首先系统自带的python版本是3.6.9，现在需要一个<code>&gt;=3.7</code>的版本。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> python3.7</code></pre><p>此时python3.7已经安装，但默认命令python3指向的还是3.6.9，下面切换python的默认指向。</p><h3 id="切换默认指向"><a href="#切换默认指向" class="headerlink" title="切换默认指向"></a>切换默认指向</h3><p>使用update-alternatives，给python版本编号。<br>要先安装update-alternatives，先添加两个指向。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1<span class="token function">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2</code></pre><p>然后确定默认指向，执行以下命令后选择2即可（后面可以随时输入这条命令切换版本）。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --config python3</code></pre><p>这样就完成了python的版本切换。  </p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ul><li>优点：安装比较方便，比较适合对python版本要求不是很严格的用户。  </li><li>缺点：apt支持的python版本有限，特别新的版本一般是没有的。</li></ul><h2 id="方法二：Pyenv"><a href="#方法二：Pyenv" class="headerlink" title="方法二：Pyenv"></a>方法二：Pyenv</h2><p><a href="https://github.com/pyenv/pyenv">pyenv</a>做什么…</p><ul><li>允许您基于每个用户更改全局 Python 版本。</li><li>为每个项目的 Python 版本提供支持。</li><li>允许您使用环境变量覆盖 Python 版本。</li><li>一次搜索来自多个 Python 版本的命令。</li></ul><p>简单来说就是一个简单的Python版本管理器，可以轻松地在各个Python版本之间进行切换。<br>Github 30.8k Star,有点东西。。</p><h3 id="安装（推荐手动安装）："><a href="#安装（推荐手动安装）：" class="headerlink" title="安装（推荐手动安装）："></a>安装（推荐手动安装）：</h3><h4 id="自动安装（需要梯子）"><a href="#自动安装（需要梯子）" class="headerlink" title="自动安装（需要梯子）:"></a>自动安装（需要梯子）:</h4><pre class=" language-bash"><code class="language-bash">curl https://pyenv.run <span class="token operator">|</span> <span class="token function">bash</span></code></pre><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装:"></a>手动安装:</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># clone,编译</span><span class="token function">git</span> clone https://github.com/pyenv/pyenv.git ~/.pyenv<span class="token function">cd</span> ~/.pyenv <span class="token operator">&amp;&amp;</span> src/configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C src<span class="token comment" spellcheck="true"># 配置环境变量</span><span class="token keyword">echo</span> <span class="token string">'export PYENV_ROOT="<span class="token variable">$HOME</span>/.pyenv"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token keyword">echo</span> <span class="token string">'command -v pyenv >/dev/null || export PATH="<span class="token variable">$PYENV_ROOT</span>/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token keyword">echo</span> <span class="token string">'eval "<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token function">source</span> ~/.bashrc</code></pre><p>然后测试一下，打印出版本就是安装成功了。</p><pre class=" language-bash"><code class="language-bash">$ pyenv -v$ pyenv 2.3.17-5-ga57e0b50</code></pre><h4 id="使用介绍："><a href="#使用介绍：" class="headerlink" title="使用介绍："></a>使用介绍：</h4><pre class=" language-bash"><code class="language-bash">$ pyenvpyenv 2.3.17-5-ga57e0b50Usage: pyenv <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span>Some useful pyenv commands are:   --version   Display the version of pyenv   commands    List all available pyenv commands   <span class="token function">exec</span>        Run an executable with the selected Python version   global      Set or show the global Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token function">help</span>        Display <span class="token function">help</span> <span class="token keyword">for</span> a <span class="token function">command</span>   hooks       List hook scripts <span class="token keyword">for</span> a given pyenv <span class="token function">command</span>   init        Configure the shell environment <span class="token keyword">for</span> pyenv   <span class="token function">install</span>     Install a Python version using python-build   latest      Print the latest installed or known version with the given prefix   local       Set or show the local application-specific Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   prefix      Display prefixes <span class="token keyword">for</span> Python versions   rehash      Rehash pyenv shims <span class="token punctuation">(</span>run this after installing executables<span class="token punctuation">)</span>   root        Display the root directory where versions and shims are kept   shell       Set or show the shell-specific Python version   shims       List existing pyenv shims   uninstall   Uninstall Python versions   version     Show the current Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span> and its origin   version-file   Detect the <span class="token function">file</span> that sets the current pyenv version   version-name   Show the current Python version   version-origin   Explain how the current Python version is <span class="token keyword">set</span>   versions    List all Python versions available to pyenv   whence      List all Python versions that contain the given executable   <span class="token function">which</span>       Display the full path to an executableSee `pyenv <span class="token function">help</span> <span class="token operator">&lt;</span>command<span class="token operator">></span>' <span class="token keyword">for</span> information on a specific command.</code></pre><p>虽然它有一大堆命令，但实际使用频率高的命令并不多，主要有以下几个：</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>pyenv versions</code></td><td>列出系统当前所有的python版本</td></tr><tr><td><code>pyenv version</code></td><td>打印系统当前python版本</td></tr><tr><td><code>pyenv install</code></td><td>安装指定版本</td></tr><tr><td><code>pyenv global</code></td><td>设置python版本</td></tr><tr><td><code>pyenv uninstall</code></td><td>卸载指定版本</td></tr></tbody></table><h4 id="查找需要安装的Python版本："><a href="#查找需要安装的Python版本：" class="headerlink" title="查找需要安装的Python版本："></a>查找需要安装的Python版本：</h4><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> -l  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.  3.8.2  3.8.3  3.8.4  3.8.5  3.8.6  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.  3.9.1  3.9.2  3.9.4  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.</code></pre><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><p>找到自己需要的版本，pyenv默认从python官网下载tar包，国内访问速度很慢，timeout也正常。可以考虑换国内镜像，方法放在后面。</p><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> 3.x.x</code></pre><p>这样就算安装完成了。</p><h4 id="切换版本："><a href="#切换版本：" class="headerlink" title="切换版本："></a>切换版本：</h4><pre class=" language-bash"><code class="language-bash">$ pyenv versions*  system  3.8.5 <span class="token punctuation">(</span>set by /root/.pyenv/version<span class="token punctuation">)</span>$ pyenv global 3.8.5$ pyenv version3.8.5 <span class="token punctuation">(</span>set by /root/.pyenv/version<span class="token punctuation">)</span></code></pre><p>（注意切换回系统自带版本的时候， <code>pyenv global system</code>）  </p><h3 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h3><p>这里我使用的是淘宝的源 <code>https://npm.taobao.org/mirrors/python/</code><br>pyenv 没有配置源地址的地方，不过我们可以变通一下。<br>它安装 Python 的流程就是先将把包下载到 <code>~/.pyenv/cache</code> 目录，然后在进行安装，慢也就慢在下载的这个过程。<br>先手动将包下载到指定目录，再执行 pyenv install 即可。<br>可以精简为一个shll命令：  </p><pre class=" language-bash"><code class="language-bash">v<span class="token operator">=</span>3.8.5<span class="token punctuation">;</span> curl -L https://npm.taobao.org/mirrors/python/<span class="token variable">$v</span>/Python-<span class="token variable">$v</span>.tar.xz -o ~/.pyenv/cache/Python-<span class="token variable">$v</span>.tar.xz<span class="token punctuation">;</span> pyenv <span class="token function">install</span> <span class="token variable">$v</span></code></pre><p>或者  </p><h4 id="一劳永逸："><a href="#一劳永逸：" class="headerlink" title="一劳永逸："></a>一劳永逸：</h4><p>可以写在~/.bashrc </p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> pyinstall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v<span class="token operator">=</span><span class="token variable">$1</span>    <span class="token keyword">echo</span> <span class="token string">'准备安装 Python'</span> <span class="token variable">$v</span>    curl -L https://npm.taobao.org/mirrors/python/<span class="token variable">$v</span>/Python-<span class="token variable">$v</span>.tar.xz -o ~/.pyenv/cache/Python-<span class="token variable">$v</span>.tar.xz    pyenv <span class="token function">install</span> <span class="token variable">$v</span><span class="token punctuation">}</span></code></pre><p>写在<code>~/.bashrc</code> 保存，使改动生效<code>source ~/.bashrc</code> 。<br>对了，第一次运行的话，需要在pyenv下创建一下缓存目录：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/.pyenv/cache</code></pre><h4 id="使用换源的安装命令："><a href="#使用换源的安装命令：" class="headerlink" title="使用换源的安装命令："></a>使用换源的安装命令：</h4><pre class=" language-bash"><code class="language-bash">$ pyinstall 3.9.16准备安装 Python 3.9.16  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100   145  100   145    0     0    184      0 --:--:-- --:--:-- --:--:--   184100 18.8M  100 18.8M    0     0  1933k      0  0:00:09  0:00:09 --:--:-- 2361kInstalling Python-3.9.16<span class="token punctuation">..</span>.Installed Python-3.9.16 to /root/.pyenv/versions/3.9.16</code></pre><p>其他指令还是和原来一样的。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: EACCES: permission denied 解决方法</title>
      <link href="/posts/2498748118.html"/>
      <url>/posts/2498748118.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用npm命令时报错误Error-EACCES-permission-denied，如何解决？"><a href="#使用npm命令时报错误Error-EACCES-permission-denied，如何解决？" class="headerlink" title="使用npm命令时报错误Error: EACCES: permission denied，如何解决？"></a>使用npm命令时报错误Error: EACCES: permission denied，如何解决？</h1><h2 id="报错信息如下："><a href="#报错信息如下：" class="headerlink" title="报错信息如下："></a>报错信息如下：</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/lib/node_modules<span class="token function">npm</span> ERR<span class="token operator">!</span> path /usr/lib/node_modules<span class="token function">npm</span> ERR<span class="token operator">!</span> code EACCES<span class="token function">npm</span> ERR<span class="token operator">!</span> errno -13<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall access<span class="token function">npm</span> ERR<span class="token operator">!</span> Error: EACCES: permission denied, access <span class="token string">'/usr/lib/node_modules'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>  <span class="token punctuation">{</span> Error: EACCES: permission denied, access <span class="token string">'/usr/lib/node_modules'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>   stack: <span class="token string">'Error: EACCES: permission denied, access \'/usr/lib/node_modules\''</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   errno: -13,<span class="token function">npm</span> ERR<span class="token operator">!</span>   code: <span class="token string">'EACCES'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   syscall: <span class="token string">'access'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   path: <span class="token string">'/usr/lib/node_modules'</span> <span class="token punctuation">}</span><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> Please try running this <span class="token function">command</span> again as root/Administrator.</code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>官方也提供了一种方法，但是比较繁琐。。<br>还有一种方法，改变npm默认的路径。<br>进入终端，依次输入一下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建global安装任务的目录</span>$ <span class="token function">mkdir</span> ~/.npm-global<span class="token comment" spellcheck="true"># 配置npm使用新的目录</span>$ <span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">'~/.npm-global'</span><span class="token comment" spellcheck="true"># 在~/.bashrc文件中增加配置</span>$ <span class="token function">export</span> PATH<span class="token operator">=</span>~/.npm-global/bin:<span class="token variable">$PATH</span><span class="token comment" spellcheck="true"># 配置文件立即生效</span>$ <span class="token function">source</span> ~/.bashrc<span class="token comment" spellcheck="true"># 重新执行命令</span>$ <span class="token function">npm</span> <span class="token function">install</span> -g xxxx </code></pre><p>有没有解决你的问题呢？</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速搭建自己的专属博客</title>
      <link href="/posts/3267187531.html"/>
      <url>/posts/3267187531.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>记录下博客搭建过程，首先介绍下搭建的框架：<br><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架,Hexo 使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><p>介绍完了，下面开始搭建喽！</p><h2 id="二、博客环境搭建"><a href="#二、博客环境搭建" class="headerlink" title="二、博客环境搭建"></a>二、博客环境搭建</h2><p>我的系统是<code>macOs</code>，和<code>linux</code>的操作基本没差别。</p><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p><a href="https://nodejs.org/en/download">Node.js</a>官网下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后就是打开安装包，按照引导一步一步进行就好了。<br>安装好后，在命令行执行 <code>node -v</code> 和 <code>npm -v</code>，打印出版本号就是安装成功了。</p><pre class=" language-bash"><code class="language-bash">$ node -v$ v18.16.0$ <span class="token function">npm</span> -v$ 9.5.1</code></pre><h4 id="npm-error"><a href="#npm-error" class="headerlink" title="npm error"></a>npm error</h4><p>在使用npm的时候可能会有一个问题 <a href="/posts/2498748118.html" title="Error: EACCES: permission denied 解决方法">Error: EACCES: permission denied</a>，遇到的可以看一下。</p><h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><p>命令行安装即可。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>其他 <code>linux</code> ，比如<code>Ubuntu</code> :</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span></code></pre><h3 id="3-github配置"><a href="#3-github配置" class="headerlink" title="3.github配置"></a>3.github配置</h3><p>首先没有<a href="https://github.com/">github</a>账号的，要去注册下github的账号。 </p><p>然后新建代码仓库，注意代码仓库的名字一定要是这样<code>&lt;your github name&gt;.github.io</code>.  </p><p>接下来在github添加你的SSH Key，因为要频繁的push代码，如果走https的方式，每次都需要输入账号密码，非常麻烦。而采用ssh的方式，就不再需要输入，只需要在github自己账号下配置一个ssh key即可。</p><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><p>git使用SSH配置， 初始需要以下三个步骤：</p><ul><li>使用秘钥生成工具生成rsa秘钥和公钥</li><li>将rsa公钥添加到代码托管平台</li><li>将rsa秘钥添加到ssh-agent中，为ssh client指定使用的秘钥文件</li></ul><p>具体操作如下：</p><h5 id="a-检查本地主机是否已经存在ssh-key"><a href="#a-检查本地主机是否已经存在ssh-key" class="headerlink" title="a.检查本地主机是否已经存在ssh key"></a>a.检查本地主机是否已经存在ssh key</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span></code></pre><p>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key，直接跳到3。</p><h5 id="b-生成ssh-key"><a href="#b-生成ssh-key" class="headerlink" title="b.生成ssh key"></a>b.生成ssh key</h5><p>如果不存在ssh key，使用如下命令生成:</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"xxx@xxx.com"</span><span class="token comment" spellcheck="true"># 执行后一直回车即可</span></code></pre><h5 id="c-获取ssh-key公钥内容（id-rsa-pub）"><a href="#c-获取ssh-key公钥内容（id-rsa-pub）" class="headerlink" title="c.获取ssh key公钥内容（id_rsa.pub）"></a>c.获取ssh key公钥内容（id_rsa.pub）</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">cat</span> id_rsa.pub</code></pre><p>这时会打印<code>id_rsa.pub</code>的内容，复制一下。  </p><h5 id="d-Github账号上添加公钥"><a href="#d-Github账号上添加公钥" class="headerlink" title="d.Github账号上添加公钥"></a>d.Github账号上添加公钥</h5><p>github右上角头像-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH key<br>把刚才复制的内容粘贴上去保存即可。</p><h5 id="e-验证是否设置成功"><a href="#e-验证是否设置成功" class="headerlink" title="e.验证是否设置成功"></a>e.验证是否设置成功</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.comWelcome to Github, @xxx<span class="token operator">!</span></code></pre><p>显示欢迎信息表明设置成功。设置成功后，即可不需要账号密码clone和push代码。<br>接下来在本地设置git信息。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你注册时的邮箱"</span></code></pre><h2 id="三、博客初始化"><a href="#三、博客初始化" class="headerlink" title="三、博客初始化"></a>三、博客初始化</h2><p>安装好node.js后，第一次使用npm可能会报错，可以参考<a href="#npm-error">npm error</a>。<br>1.给npm换国内源，提升下速度。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npmmirror.com</code></pre><p>2.命令行安装hexo （安装博客框架）</p><p>命令：<code>npm install -g hexo-cli</code></p><p>安装后验证：<code>hexo -v</code> 出现版本号说明安装成功</p><p>3.在本地新建一个名为blog的目录（位置、名字随意），比如我的是~/blog。<br>命令：<code>mkdir -p ~/blog</code></p><p>4.这个路径将来就作为你存放代码的地方，所以最好不要随便放</p><p><code>hexo init</code> 初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code> 生成命令</p><p><code>hexo s</code> 启动服务<br>说明：<code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到内容，说明博客初始化以及成功！</p><p>到此博客的本地初始化便完成了，接下来设置下博客的部署地址,推送博客到github。</p><h2 id="四、部署博客到Github"><a href="#四、部署博客到Github" class="headerlink" title="四、部署博客到Github"></a>四、部署博客到Github</h2><h3 id="1-安装git插件"><a href="#1-安装git插件" class="headerlink" title="1.安装git插件"></a>1.安装git插件</h3><p>在<code>~/blog</code>目录下安装 <code>hexo-deployer-git</code> 插件。 </p><p>命令：<code>npm install hexo-deployer-git --save</code>  </p><p>说明：必须安装，否则执行<code>hexo d</code> 的话会报错</p><h3 id="2-设置部署仓库地址"><a href="#2-设置部署仓库地址" class="headerlink" title="2.设置部署仓库地址"></a>2.设置部署仓库地址</h3><p>编辑<code>~/blog</code>目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> github上对应仓库的ssh链接，如：     git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre><p>注意：现在github的主分支是<code>main</code>。</p><h3 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h3><p><code>hexo d</code> 推送代码到远程仓库。<br>一些顺利的话，大概几分钟后，在浏览器输入<code>username.github.io</code> 就可以看到你的博客了，就算本地电脑关机也没事。<br>常用命令说明：  </p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo s</code></td><td>本地预览</td></tr><tr><td><code>hexo clean</code></td><td>清除本地项目</td></tr><tr><td><code>hexo g</code></td><td>重新生成</td></tr><tr><td><code>hexo d</code></td><td>推送代码</td></tr></tbody></table><h2 id="五、主题下载与安装"><a href="#五、主题下载与安装" class="headerlink" title="五、主题下载与安装"></a>五、主题下载与安装</h2><p>我用的是 <code>hexo-theme-matery</code> 主题。<br>在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class=" language-bash"><code class="language-bash">hexo new page 404</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="添加中文繁简转换"><a href="#添加中文繁简转换" class="headerlink" title="添加中文繁简转换"></a>添加中文繁简转换</h3><p>在主题的 <code>_config.yml</code> 文件中，开启 translate 为 enable。</p><blockquote><p>开启中文繁简转换如下修改。默认不开启。<br>实例演示： <a href="https://blog.17lai.site/">繁简转换</a> 底下 footer 栏</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">translate</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span></code></pre><p>可能在播放某些歌曲的时候会报错：<br><code>An auido error has occurred,player will skip forward in 2 seconds</code><br>这是因为没有播放器没有获取到音乐文件，除了网络问题外，大概率是因为版权问题。</p><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），<code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）。</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code>即为这串数字。</p></blockquote><h2 id="六、文章-Front-matter-介绍"><a href="#六、文章-Front-matter-介绍" class="headerlink" title="六、文章 Front-matter 介绍"></a>六、文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Wyx<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> false 目录<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="七、主题自定义修改"><a href="#七、主题自定义修改" class="headerlink" title="七、主题自定义修改"></a>七、主题自定义修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题自带 <code>7</code> 张图片，默认逻辑是根据周一到周日每天动态切换一张。<br><code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以尝试下换个逻辑，每次刷新随机切换 <code>banner</code>(图片数量四个字需替换为你实际的图片数):</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bannerUrl <span class="token operator">=</span> <span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 图片数量<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url('</span> <span class="token operator">+</span> bannerUrl <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里推荐一个 <code>banner</code> 素材的网站<a href="https://pixabay.com/">pixabay</a>，免费，质量也还可以。<br>选择 <code>1280 x ***</code>大小的即可作为 <code>banner</code>，下载后按顺序重命名为 <code>0.jpg</code> <code>1.gpg</code> <code>2.jpg</code> <code>*.jpg</code>······ 数字按顺序排列，最后放在 <code>/source/medias/banner</code>即可。</p><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vim命令中文速查表</title>
      <link href="/posts/2140870973.html"/>
      <url>/posts/2140870973.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在别的博客看到了很多工具的速查表，但是都是英文的，阅读起来不是很方便。找了很久，终于发现了速查表中文版<a href="https://github.com/skywind3000/awesome-cheatsheets">Github</a>，虽然没有那个博客上面全，但是看起来舒服一点<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>每次都去翻别人的也不是很方便，想把他们fork过来做一个系列，分享给大家，当然会在内容以及排版上更新优化一下。</p><h1 id="VIM-CHEATSHEET-中文速查表"><a href="#VIM-CHEATSHEET-中文速查表" class="headerlink" title="VIM CHEATSHEET (中文速查表)"></a>VIM CHEATSHEET (中文速查表)</h1><ul><li>by skywind (created on 2017/10/12)</li><li>Version: 47, Last Modified: 2020/10/10 11:02</li><li><a href="https://github.com/skywind3000/awesome-cheatsheets">https://github.com/skywind3000/awesome-cheatsheets</a></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><pre class=" language-text"><code class="language-text">h                   光标左移，同 <Left> 键j                   光标下移，同 <Down> 键k                   光标上移，同 <Up> 键l                   光标右移，同 <Right> 键CTRL-F              下一页CTRL-B              上一页CTRL-U              上移半屏CTRL-D              下移半屏0                   跳到行首（是数字零，不是字母O），效用等同于 <Home> 键^                   跳到从行首开始第一个非空白字符$                   跳到行尾，效用等同于 <End> 键gg                  跳到第一行，效用等同于 CTRL+<Home>G                   跳到最后一行，效用等同于 CTRL+<End>nG                  跳到第n行，比如 10G 是移动到第十行:n                  跳到第n行，比如 :10<回车> 是移动到第十行10%                 移动到文件 10% 处15|                 移动到当前行的 15列w                   跳到下一个单词开头 (word: 标点或空格分隔的单词)W                   跳到下一个单词开头 (WORD: 空格分隔的单词)e                   跳到下一个单词尾部 (word: 标点或空格分隔的单词)E                   跳到下一个单词尾部 (WORD: 空格分隔的单词)b                   上一个单词头 (word: 标点或空格分隔的单词)B                   上一个单词头 (WORD: 空格分隔的单词)ge                  上一个单词尾)                   向前移动一个句子（句号分隔）(                   向后移动一个句子（句号分隔）}                   向前移动一个段落（空行分隔）{                   向后移动一个段落（空行分隔）<enter>             移动到下一行首个非空字符+                   移动到下一行首个非空字符（同回车键）-                   移动到上一行首个非空字符H                   移动到屏幕上部M                   移动到屏幕中部L                   移动到屏幕下部fx                  跳转到下一个为 x 的字符，2f/ 可以找到第二个斜杆Fx                  跳转到上一个为 x 的字符tx                  跳转到下一个为 x 的字符前Tx                  跳转到上一个为 x 的字符前;                   跳到下一个 f/t 搜索的结果,                   跳到上一个 f/t 搜索的结果<S-Left>            按住 SHIFT 按左键，向左移动一个单词<S-Right>           按住 SHIFT 按右键，向右移动一个单词<S-Up>              按住 SHIFT 按上键，向上翻页<S-Down>            按住 SHIFT 按下键，向下翻页gm                  移动到行中gj                  光标下移一行（忽略自动换行）gk                  光标上移一行（忽略自动换行）</code></pre><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><blockquote><p>进入退出</p></blockquote><pre class=" language-text"><code class="language-text">i                   在光标处进入插入模式I                   在行首进入插入模式a                   在光标后进入插入模式A                   在行尾进入插入模式o                   在下一行插入新行并进入插入模式O                   在上一行插入新行并进入插入模式gi                  进入到上一次插入模式的位置<ESC>               退出插入模式CTRL-[              退出插入模式（同 ESC 等价，但更顺手）</code></pre><h3 id="INSERT-MODE"><a href="#INSERT-MODE" class="headerlink" title="INSERT MODE"></a>INSERT MODE</h3><blockquote><p>由 i, I, a, A, o, O 等命令进入插入模式后</p></blockquote><pre class=" language-text"><code class="language-text"><Up>                光标向上移动<Down>              光标向下移动<Left>              光标向左移动<Right>             光标向右移动<S-Left>            按住 SHIFT 按左键，向左移动一个单词<S-Right>           按住 SHIFT 按右键，向右移动一个单词<S-Up>              按住 SHIFT 按上键，向上翻页<S-Down>            按住 SHIFT 按下键，向下翻页<PageUp>            上翻页<PageDown>          下翻页<Delete>            删除光标处字符<BS>                Backspace 向后删除字符<Home>              光标跳转行首<End>               光标跳转行尾CTRL-W              向前删除单词CTRL-O              临时退出插入模式，执行单条命令又返回插入模式CTRL-\ CTRL-O       临时退出插入模式（光标保持），执行单条命令又返回插入模式CTRL-R 0            插入寄存器（内部 0号剪贴板）内容，CTRL-R 后可跟寄存器名CTRL-R "            插入匿名寄存器内容，相当于插入模式下 p粘贴CTRL-R =            插入表达式计算结果，等号后面跟表达式CTRL-R :            插入上一次命令行命令CTRL-R /            插入上一次搜索的关键字CTRL-F              自动缩进CTRL-U              删除当前行所有字符CTRL-V {char}       插入非数字的字面量CTRL-V {number}     插入三个数字代表的 ascii/unicode 字符CTRL-V 065          插入 10进制 ascii 字符（两数字） 065 即 A字符CTRL-V x41          插入 16进制 ascii 字符（三数字） x41 即 A字符CTRL-V o101         插入  8进制 ascii 字符（三数字） o101 即 A字符CTRL-V u1234        插入 16进制 unicode 字符（四数字）CTRL-V U12345678    插入 16进制 unicode 字符（八数字）CTRL-K {ch1} {ch2}  插入 digraph（见 :h digraph），快速输入日文或符号等CTRL-D              文字向前缩进CTRL-T              文字向后缩进</code></pre><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><pre class=" language-text"><code class="language-text">r                   替换当前字符R                   进入替换模式，直至 ESC 离开s                   替换字符（删除光标处字符，并进入插入模式，前可接数量）S                   替换行（删除当前行，并进入插入模式，前可接数量）cc                  改写当前行（删除当前行并进入插入模式），同 Scw                  改写光标开始处的当前单词ciw                 改写光标所处的单词caw                 改写光标所处的单词，并且包括前后空格（如果有的话）c0                  改写到行首c^                  改写到行首（第一个非零字符）c$                  改写到行末C                   改写到行尾（同c$）ci"                 改写双引号中的内容ci'                 改写单引号中的内容cib                 改写小括号中的内容cab                 改写小括号中的内容（包含小括号本身）ci)                 改写小括号中的内容ci]                 改写中括号中内容ciB                 改写大括号中内容caB                 改写大括号中的内容（包含大括号本身）ci}                 改写大括号中内容cit                 改写 xml tag 中的内容cis                 改写当前句子c2w                 改写下两个单词ct(                 改写到小括号前c/apple             改写到光标后的第一个apple前x                   删除当前字符，前面可以接数字，3x代表删除三个字符X                   向前删除字符dd                  删除当前行d0                  删除到行首d^                  删除到行首（第一个非零字符）d$                  删除到行末D                   删除到行末（同 d$）dw                  删除当前单词diw                 删除光标所处的单词daw                 删除光标所处的单词，并包含前后空格（如果有的话）di"                 删除双引号中的内容di'                 删除单引号中的内容dib                 删除小括号中的内容di)                 删除小括号中的内容dab                 删除小括号内的内容（包含小括号本身）di]                 删除中括号中内容diB                 删除大括号中内容di}                 删除大括号中内容daB                 删除大括号内的内容（包含大括号本身）dit                 删除 xml tag 中的内容dis                 删除当前句子dip                 删除当前段落(前后有空白行的称为一个段落)dap                 删除当前段落(包括前后空白行)d2w                 删除下两个单词dt(                 删除到小括号前d/apple             删除到光标后的第一个apple前dgg                 删除到文件头部dG                  删除到文件尾部d}                  删除下一段d{                  删除上一段u                   撤销U                   撤销整行操作CTRL-R              撤销上一次 u 命令J                   链接多行为一行.                   重复上一次操作~                   替换大小写g~iw                替换当前单词的大小写gUiw                将单词转成大写guiw                将当前单词转成小写guu                 全行转为小写gUU                 全行转为大写<<                  减少缩进>>                  增加缩进==                  自动缩进CTRL-A              增加数字CTRL-X              减少数字</code></pre><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><pre class=" language-text"><code class="language-text">p                   粘贴到光标后P                   粘贴到光标前v                   开始标记y                   复制标记内容V                   开始按行标记CTRL-V              开始列标记y$                  复制当前位置到本行结束的内容yy                  复制当前行Y                   复制当前行，同 yyyiw                 复制当前单词3yy                 复制光标下三行内容v0                  选中当前位置到行首v$                  选中当前位置到行末viw                 选中当前单词vib                 选中小括号内的东西vi)                 选中小括号内的东西vi]                 选中中括号内的东西viB                 选中大括号内的东西vi}                 选中大括号内的东西vis                 选中句子中的东西vip                 选中当前段落(前后有空白行的称为一个段落)vap                 选中当前段落(包括前后空白行)vab                 选中小括号内的东西（包含小括号本身）va)                 选中小括号内的东西（包含小括号本身）va]                 选中中括号内的东西（包含中括号本身）vaB                 选中大括号内的东西（包含大括号本身）va}                 选中大括号内的东西（包含大括号本身）gv                  重新选择上一次选中的文字:set paste          允许粘贴模式（避免粘贴时自动缩进影响格式）:set nopaste        禁止粘贴模式"?yy                复制当前行到寄存器 ? ，问号代表 0-9 的寄存器名称"?d3j               删除光标下三行内容，并放到寄存器 ? ，问号代表 0-9 的寄存器名称"?p                 将寄存器 ? 的内容粘贴到光标后"?P                 将寄存器 ? 的内容粘贴到光标前:registers          显示所有寄存器内容:[range]y           复制范围，比如 :20,30y 是复制20到30行，:10y 是复制第十行:[range]d           删除范围，比如 :20,30d 是删除20到30行，:10d 是删除第十行ddp                 交换两行内容：先删除当前行复制到寄存器，并粘贴"_[command]         使用[command]删除内容，并且不进行复制（不会污染寄存器）"*[command]         使用[command]复制内容到系统剪贴板（需要vim版本有clipboard支持）</code></pre><h3 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h3><blockquote><p>c,d,v,y 等命令后接文本对象，一般为：&lt;范围 i/a&gt;&lt;类型&gt;</p></blockquote><pre class=" language-text"><code class="language-text">$                   到行末0                   到行首^                   到行首非空字符tx                  光标位置到字符 x 之前fx                  光标位置到字符 x 之处iw                  整个单词（不包括分隔符）aw                  整个单词（包括分隔符）iW                  整个 WORD（不包括分隔符）aW                  整个 WORD（包括分隔符）is                  整个句子（不包括分隔符）as                  整个句子（包括分隔符）ip                  整个段落（不包括前后空白行）ap                  整个段落（包括前后空白行）ib                  小括号内ab                  小括号内（包含小括号本身）iB                  大括号内aB                  大括号内（包含大括号本身）i)                  小括号内a)                  小括号内（包含小括号本身）i]                  中括号内a]                  中括号内（包含中括号本身）i}                  大括号内a}                  大括号内（包含大括号本身）i'                  单引号内a'                  单引号内（包含单引号本身）i"                  双引号内a"                  双引号内（包含双引号本身）2i)                 往外两层小括号内2a)                 往外两层小括号内（包含小括号本身）2f)                 到第二个小括号处2t)                 到第二个小括号前</code></pre><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><pre class=" language-text"><code class="language-text">/pattern            从光标处向文件尾搜索 pattern?pattern            从光标处向文件头搜索 patternn                   向同一方向执行上一次搜索N                   向相反方向执行上一次搜索*                   向前搜索光标下的单词#                   向后搜索光标下的单词:s/p1/p2/g          将当前行中全替换p1为p2:%s/p1/p2/g         将当前文件中全替换p1为p2:%s/p1/p2/gc        将当前文件中全替换p1为p2，并且每处询问你是否替换:10,20s/p1/p2/g     将第10到20行中所有p1替换为p2:., ns/p1/p2/g      将当前行到n行中所有p1替换为p2:., +10s/p1/p2/g    将当前行到相对当前行加10行的区间中所有p1替换为p2:., $s/p1/p2/g      将当前行到最后一行中所有p1替换为p2:0,.s/p1/p2/g       将第一行到当前行中所有p1替换为p2:%s/1\\2\/3/123/g   将“1\2/3” 替换为 “123”（特殊字符使用反斜杠标注）:%s/\r//g           删除 DOS 换行符 ^M</code></pre><h3 id="VISUAL-MODE"><a href="#VISUAL-MODE" class="headerlink" title="VISUAL MODE"></a>VISUAL MODE</h3><blockquote><p>由 v, V, CTRL-V 进入的可视模式</p></blockquote><pre class=" language-text"><code class="language-text">>                   增加缩进<                   减少缩进d                   删除高亮选中的文字x                   删除高亮选中的文字c                   改写文字，即删除高亮选中的文字并进入插入模式s                   改写文字，即删除高亮选中的文字并进入插入模式y                   拷贝文字~                   转换大小写o                   跳转到标记区的另外一端O                   跳转到标记块的另外一端u                   标记区转换为小写U                   标记区转换为大写g CTRL-G            显示所选择区域的统计信息<Esc>               退出可视模式</code></pre><h3 id="位置跳转"><a href="#位置跳转" class="headerlink" title="位置跳转"></a>位置跳转</h3><pre class=" language-text"><code class="language-text">CTRL-O              跳转到上一个位置CTRL-I              跳转到下一个位置CTRL-^              跳转到 alternate file (当前窗口的上一个文件）CTRL-]              跳转到当前光标文字下的超链接CTRL-T              返回到跳转之前的位置%                   跳转到 {} () [] 的匹配gd                  跳转到局部定义（光标下的单词的定义）gD                  跳转到全局定义（光标下的单词的定义）gf                  打开名称为光标下文件名的文件[[                  跳转到上一个顶层函数（比如C语言以大括号分隔）]]                  跳转到下一个顶层函数（比如C语言以大括号分隔）[m                  跳转到上一个成员函数]m                  跳转到下一个成员函数[{                  跳转到上一处未匹配的 {]}                  跳转到下一处未匹配的 }[(                  跳转到上一处未匹配的 (])                  跳转到下一处未匹配的 )[c                  上一个不同处（diff时）]c                  下一个不同处（diff时）[/                  跳转到 C注释开头]/                  跳转到 C注释结尾``                  回到上次跳转的位置''                  回到上次跳转的位置`.                  回到上次编辑的位置'.                  回到上次编辑的位置</code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre class=" language-text"><code class="language-text">:w                  保存文件:w <filename>       按名称保存文件:e <filename>       打开文件并编辑:saveas <filename>  另存为文件:r <filename>       读取文件并将内容插入到光标后:r !dir             将 dir 命令的输出捕获并插入到光标后:close              关闭文件:q                  退出:q!                 强制退出:wa                 保存所有文件:cd <path>          切换 Vim 当前路径:pwd                显示 Vim 当前路径:new                打开一个新的窗口编辑新文件:enew               在当前窗口创建新文件:vnew               在左右切分的新窗口中编辑新文件:tabnew             在新的标签页中编辑新文件</code></pre><h3 id="已打开文件操作"><a href="#已打开文件操作" class="headerlink" title="已打开文件操作"></a>已打开文件操作</h3><pre class=" language-text"><code class="language-text">:ls                 查案缓存列表:bn                 切换到下一个缓存:bp                 切换到上一个缓存:bd                 删除缓存:b 1                切换到1号缓存:b abc              切换到文件名为 abc 开头的缓存:badd <filename>    将文件添加到缓存列表:set hidden         设置隐藏模式（未保存的缓存可以被切换走，或者关闭）:set nohidden       关闭隐藏模式（未保存的缓存不能被切换走，或者关闭）n CTRL-^            切换缓存，先输入数字的缓存编号，再按 CTRL + 6</code></pre><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><pre class=" language-text"><code class="language-text">:sp <filename>      上下切分窗口并在新窗口打开文件 filename:vs <filename>      左右切分窗口并在新窗口打开文件 filenameCTRL-W s            上下切分窗口CTRL-W v            左右切分窗口CTRL-W w            循环切换到下一个窗口CTRL-W W            循环切换到上一个窗口CTRL-W p            跳到上一个访问过的窗口CTRL-W c            关闭当前窗口CTRL-W o            关闭其他窗口CTRL-W h            跳到左边的窗口CTRL-W j            跳到下边的窗口CTRL-W k            跳到上边的窗口CTRL-W l            跳到右边的窗口CTRL-W +            增加当前窗口的行高，前面可以加数字CTRL-W -            减少当前窗口的行高，前面可以加数字CTRL-W <            减少当前窗口的列宽，前面可以加数字CTRL-W >            增加当前窗口的列宽，前面可以加数字CTRL-W =            让所有窗口宽高相同CTRL-W H            将当前窗口移动到最左边CTRL-W J            将当前窗口移动到最下边CTRL-W K            将当前窗口移动到最上边CTRL-W L            将当前窗口移动到最右边CTRL-W x            交换窗口CTRL-W f            在新窗口中打开名为光标下文件名的文件CTRL-W gf           在新标签页中打开名为光标下文件名的文件CTRL-W R            旋转窗口CTRL-W T            将当前窗口移到新的标签页中CTRL-W P            跳转到预览窗口CTRL-W z            关闭预览窗口CTRL-W _            纵向最大化当前窗口CTRL-W |            横向最大化当前窗口</code></pre><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><pre class=" language-text"><code class="language-text">:set nocompatible   设置不兼容原始 vi 模式（必须设置在最开头）:set bs=?           设置BS键模式，现代编辑器为 :set bs=eol,start,indent:set sw=4           设置缩进宽度为 4:set ts=4           设置制表符宽度为 4:set noet           设置不展开 tab 成空格:set et             设置展开 tab 成空格:set winaltkeys=no  设置 GVim 下正常捕获 ALT 键:set nowrap         关闭自动换行:set ttimeout       允许终端按键检测超时（终端下功能键为一串ESC开头的扫描码）:set ttm=100        设置终端按键检测超时为100毫秒:set term=?         设置终端类型，比如常见的 xterm:set ignorecase     设置搜索忽略大小写(可缩写为 :set ic):set noignorecase   设置搜索不忽略大小写(可缩写为 :set noic):set smartcase      智能大小写，默认忽略大小写，除非搜索内容里包含大写字母:set list           设置显示制表符和换行符:set number         设置显示行号，禁止显示行号可以用 :set nonumber:set relativenumber 设置显示相对行号（其他行与当前行的距离）:set paste          进入粘贴模式（粘贴时禁用缩进等影响格式的东西）:set nopaste        结束粘贴模式:set spell          允许拼写检查:set hlsearch       设置高亮查找:set ruler          总是显示光标位置:set incsearch      查找输入时动态增量显示查找结果:set insertmode     Vim 始终处于插入模式下，使用 ctrl-o 临时执行命令:set all            列出所有选项设置情况:syntax on          允许语法高亮:syntax off         禁止语法高亮</code></pre><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><pre class=" language-text"><code class="language-text">:tabs               显示所有标签页:tabe <filename>    在新标签页中打开文件 filename:tabn               下一个标签页:tabp               上一个标签页:tabc               关闭当前标签页:tabo               关闭其他标签页:tabn n             切换到第n个标签页，比如 :tabn 3 切换到第三个标签页:tabm n             标签移动:tabfirst           切换到第一个标签页:tablast            切换到最后一个标签页:tab help           在标签页打开帮助:tab drop <file>    如果文件已被其他标签页和窗口打开则跳过去，否则新标签打开:tab split          在新的标签页中打开当前窗口里的文件:tab ball           将缓存中所有文件用标签页打开:set showtabline=?  设置为 0 就不显示标签页标签，1会按需显示，2会永久显示ngt                 切换到第n个标签页，比如 2gt 将会切换到第二个标签页gt                  下一个标签页gT                  上一个标签页</code></pre><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><pre class=" language-text"><code class="language-text">:marks              显示所有书签ma                  保存当前位置到书签 a ，书签名小写字母为文件内，大写全局'a                  跳转到书签 a所在的行`a                  跳转到书签 a所在位置`.                  跳转到上一次编辑的行'A                  跳转到全文书签 A['                  跳转到上一个书签]'                  跳转到下一个书签'<                  跳到上次可视模式选择区域的开始'>                  跳到上次可视模式选择区域的结束:delm a             删除缓冲区标签a:delm A             删除文件标签A:delm!              删除所有缓冲区标签(小写字母), 不能删除文件标签和数字标签:delm A-Z           删除所有文件标签(大写字母):delm 0-9           删除所有数字标签(.viminfo):delm A-Z0-9        删除所有文件标签和数字标签</code></pre><h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><pre class=" language-text"><code class="language-text">:h tutor            入门文档:h quickref         快速帮助:h index            查询 Vim 所有键盘命令定义:h summary          帮助你更好的使用内置帮助系统:h CTRL-H           查询普通模式下 CTRL-H 是干什么的:h i_CTRL-H         查询插入模式下 CTRL-H 是干什么的:h i_<Up>           查询插入模式下方向键上是干什么的:h pattern.txt      正则表达式帮助:h eval             脚本编写帮助:h function-list    查看 VimScript 的函数列表 :h windows.txt      窗口使用帮助:h tabpage.txt      标签页使用帮助:h +timers          显示对 +timers 特性的帮助:h :!               查看如何运行外部命令:h tips             查看 Vim 内置的常用技巧文档:h set-termcap      查看如何设置按键扫描码:viusage            NORMAL 模式帮助:exusage            EX 命令帮助:version            显示当前 Vim 的版本号和特性</code></pre><h2 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h2><pre class=" language-text"><code class="language-text">:!ls                运行外部命令 ls，并等待返回:r !ls              将外部命令 ls 的输出捕获，并插入到光标后:w !sudo tee %      sudo以后保存当前文件:call system('ls')  调用 ls 命令，但是不显示返回内容:!start notepad     Windows 下启动 notepad，最前面可以加 silent:sil !start cmd     Windows 下当前目录打开 cmd:%!prog             运行文字过滤程序，如整理 json格式 :%!python -m json.tool</code></pre><h2 id="Quickfix-窗口"><a href="#Quickfix-窗口" class="headerlink" title="Quickfix 窗口"></a>Quickfix 窗口</h2><pre class=" language-text"><code class="language-text">:copen              打开 quickfix 窗口（查看编译，grep等信息）:copen 10           打开 quickfix 窗口，并且设置高度为 10:cclose             关闭 quickfix 窗口:cfirst             跳到 quickfix 中第一个错误信息:clast              跳到 quickfix 中最后一条错误信息:cc [nr]            查看错误 [nr]:cnext              跳到 quickfix 中下一个错误信息:cprev              跳到 quickfix 中上一个错误信息</code></pre><h2 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h2><pre class=" language-text"><code class="language-text">:set spell          打开拼写检查:set nospell        关闭拼写检查]s                  下一处错误拼写的单词[s                  上一处错误拼写的单词zg                  加入单词到拼写词表中zug                 撤销上一次加入的单词z=                  拼写建议</code></pre><h2 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h2><pre class=" language-text"><code class="language-text">za                  切换折叠zA                  递归切换折叠zc                  折叠光标下代码zC                  折叠光标下所有代码zd                  删除光标下折叠zD                  递归删除所有折叠zE                  删除所有折叠zf                  创建代码折叠zF                  指定行数创建折叠zi                  切换折叠zm                  所有代码折叠一层zr                  所有代码打开一层zM                  折叠所有代码，设置 foldlevel=0，设置 foldenablezR                  打开所有代码，设置 foldlevel 为最大值zn                  折叠 none，重置 foldenable 并打开所有代码zN                  折叠 normal，重置 foldenable 并恢复所有折叠zo                  打开一层代码zO                  打开光标下所有代码折叠</code></pre><h2 id="宏录制"><a href="#宏录制" class="headerlink" title="宏录制"></a>宏录制</h2><pre class=" language-text"><code class="language-text">qa                  开始录制名字为 a 的宏q                   结束录制宏@a                  播放名字为 a 的宏@@                  播放上一个宏@:                  重复上一个ex命令（即冒号命令）</code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><pre class=" language-text"><code class="language-text">CTRL-X CTRL-F       插入模式下文件路径补全CTRL-X CTRL-O       插入下 Omnifunc 补全CTRL-X CTRL-N       插入模式下关键字补全CTRL-X CTRL-E       插入模式下向上滚屏CTRL-X CTRL-Y       插入模式下向下滚屏CTRL-E              向上滚屏CTRL-Y              向下滚屏CTRL-G              显示正在编辑的文件名，以及大小和位置信息g CTRL-G            显示文件的：大小，字符数，单词数和行数，可视模式下也可用zz                  调整光标所在行到屏幕中央zt                  调整光标所在行到屏幕上部zb                  调整光标所在行到屏幕下部ga                  显示光标下字符的 ascii 码或者 unicode 编码g8                  显示光标下字符的 utf-8 编码字节序gi                  回到上次进入插入的地方，并切换到插入模式K                   查询光标下单词的帮助ZZ                  保存文件（如果有改动的话），并关闭窗口ZQ                  不保存文件关闭窗口CTRL-PgUp           上个标签页，GVim OK，部分终端软件需设置对应键盘码CTRL-PgDown         下个标签页，GVim OK，部分终端软件需设置对应键盘码CTRL-R CTRL-W       命令模式下插入光标下单词CTRL-INSERT         复制到系统剪贴板（GVIM）SHIFT-INSERT        粘贴系统剪贴板的内容（GVIM）:set ff=unix        设置换行为 unix:set ff=dos         设置换行为 dos:set ff?            查看换行设置:set nohl           清除搜索高亮:set termcap        查看会从终端接收什么以及会发送给终端什么命令:set guicursor=     解决 SecureCRT/PenguiNet 中 NeoVim 局部奇怪字符问题:set t_RS= t_SH=    解决 SecureCRT/PenguiNet 中 Vim8.0 终端功能奇怪字符:set fo+=a          开启文本段的实时自动格式化:earlier 15m        回退到15分钟前的文件内容:.!date             在当前窗口插入时间:%!xxd              开始二进制编辑:%!xxd -r           保存二进制编辑:r !curl -sL {URL}  读取 url 内容添加到光标后:g/^\s*$/d          删除空行:g/green/d          删除所有包含 green 的行:v/green/d          删除所有不包含 green 的行:g/gladiolli/#      搜索单词打印结果，并在结果前加上行号:g/ab.*cd.*efg/#    搜索包含 ab,cd 和 efg 的行，打印结果以及行号:v/./,/./-j         压缩空行:Man bash           在 Vim 中查看 man，先调用 :runtime! ftplugin/man.vim 激活/fred\|joe          搜索 fred 或者 joe/\<\d\d\d\d\>       精确搜索四个数字/^\n\{3}            搜索连续三个空行</code></pre><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><ul><li><a href="https://github.com/tpope/vim-commentary">https://github.com/tpope/vim-commentary</a></li></ul><pre class=" language-text"><code class="language-text">gcc                 注释当前行gc{motion}          注释 {motion} 所标注的区域，比如 gcap 注释整段gci{                注释大括号内的内容gc                  在 Visual Mode 下面按 gc 注释选中区域:7,17Commentary     注释 7 到 17 行</code></pre><ul><li><a href="https://github.com/junegunn/vim-easy-align">https://github.com/junegunn/vim-easy-align</a></li></ul><pre class=" language-text"><code class="language-text">:EasyAlign =        以第一个匹配的=为中心对齐:EasyAlign *=       匹配并且对齐所有=</code></pre><ul><li><a href="https://github.com/tpope/vim-unimpaired">https://github.com/tpope/vim-unimpaired</a></li></ul><pre class=" language-text"><code class="language-text">[space              向上插入空行]space              向下插入空行[e                  替换当前行和上一行]e                  替换当前行和下一行[x                  XML 编码]x                  XML 解码[u                  URL 编码]u                  URL 解码[y                  C 字符串编码]y                  C 字符串解码[q                  上一个 quickfix 错误]q                  下一个 quickfix 错误[Q                  第一个 quickfix 错误]Q                  最后一个 quickfix 错误[f                  切换同目录里上一个文件]f                  切换同目录里下一个文件[os                 设置 :set spell]os                 设置 :set nospell=os                 设置 :set invspell[on                 显示行号]on                 关闭行号[ol                 显示回车和制表符 :set list]ol                 不显示回车和制表符 :set nolist[b                  缓存切换到上一个文件，即 :bp]b                  缓存切换到下一个文件，即 :bn[B                  缓存切换到第一个文件，即 :bfirst]B                  缓存切换到最后一个文件，即 :blast</code></pre><ul><li><a href="https://github.com/skywind3000/asyncrun.vim">https://github.com/skywind3000/asyncrun.vim</a></li></ul><pre class=" language-text"><code class="language-text">:AsyncRun ls        异步运行命令 ls 结果输出到 quickfix 使用 :copen 查看:AsyncRun -raw ls   异步运行命令 ls 结果不匹配 errorformat</code></pre><ul><li><a href="https://github.com/gaving/vim-textobj-argument">https://github.com/gaving/vim-textobj-argument</a></li></ul><pre class=" language-text"><code class="language-text">cia                 改写函数参数caa                 改写函数参数（包括逗号分隔）dia                 删除函数参数daa                 删除函数参数（包括逗号分隔）via                 选取函数参数vaa                 选取函数参数（包括逗号分隔）yia                 复制函数参数yaa                 复制函数参数（包括逗号分隔）</code></pre><h2 id="网络资源"><a href="#网络资源" class="headerlink" title="网络资源"></a>网络资源</h2><pre class=" language-text"><code class="language-text">最新版本            https://github.com/vim/vim   Windows 最新版      https://github.com/vim/vim-win32-installer/releases插件浏览            http://vimawesome.comreddit              https://www.reddit.com/r/vim/正确设置 ALT/BS 键  http://www.skywind.me/blog/archives/2021视频教程            http://vimcasts.org/中文帮助            http://vimcdoc.sourceforge.net/doc/help.html中文版入门到精通    https://github.com/wsdjeg/vim-galore-zh_cn五分钟脚本入门      http://www.skywind.me/blog/archives/2193脚本精通            http://learnvimscriptthehardway.stevelosh.com/中文脚本帮助        vimcdoc.sourceforge.net/doc/eval.html十六年使用经验      http://zzapper.co.uk/vimtips.html配色方案            http://vimcolors.com/</code></pre><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><pre class=" language-text"><code class="language-text">- 永远不要用 CTRL-C 代替 <ESC> 完全不同的含义，容易错误中断运行的后台脚本- 很多人使用 CTRL-[ 代替 <ESC>，左手小指 CTRL，右手小指 [ 熟练后很方便- 某些终端中使用 Vim 8 内嵌终端如看到奇怪字符，使用 :set t_RS= t_SH= 解决- 某些终端中使用 Vim 8.2+ 会看到一些奇怪字符，使用 :set t_TI= t_TE= 解决- 某些终端中使用 NeoVim 如看到奇怪字符，使用 :set guicursor= 解决- 使用 MS-Terminal 如果进入 Vim/NVim 会默认替换模式设置 :set t_u7= 解决- 多使用 ciw, ci[, ci", ci( 以及 diw, di[, di", di( 命令来快速改写/删除文本- 在行内左右移动光标时，多使用w b e或W B E，而不是h l或方向键，这样会快很多- SHIFT 相当于移动加速键， w b e 移动光标很慢，但是 W B E 走的很快- 自己要善于总结新技巧，比如移动到行首非空字符时用 0w 命令比 ^ 命令更容易输入- 在空白行使用 dip 命令可以删除所有临近的空白行，viw 可以选择连续空白- 缩进时使用 >8j  >}  <ap  >ap  =i}  == 会方便很多- 插入模式下，当你发现一个单词写错了，应该多用 CTRL-W 这比 <BackSpace> 快- y d c 命令可以很好结合 f t 和 /X 比如 dt) 和 y/end<cr>- c d x 命令会自动填充寄存器 "1 到 "9 , y 命令会自动填充 "0 寄存器- 用 v 命令选择文本时，可以用 o 掉头选择，有时很有用- 写文章时，可以写一段代码块，然后选中后执行 :!python 代码块就会被替换成结果- 搜索后经常使用 :nohl 来消除高亮，使用很频繁，可以 map 到 <BackSpace> 上- 搜索时可以用 CTRL-R CTRL-W 插入光标下的单词，命令模式也能这么用- 映射按键时，应该默认使用 noremap ，只有特别需要的时候使用 map- 当你觉得做某事很低效时，你应该停下来，u u u u 然后思考正确的高效方式来完成- 用 y复制文本后，命令模式中 CTRL-R 然后按双引号 0 可以插入之前复制内容- 某些情况下 Vim 绘制高亮慢，滚屏刷新慢可以试试 set re=1 使用老的正则引擎- Windows 下的 GVim 可以设置 set rop=type:directx,renmode:5 增强显示</code></pre><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/groenewege/vimrc/blob/master/vim_cheat_sheet.txt">https://github.com/groenewege/vimrc/blob/master/vim_cheat_sheet.txt</a><br><a href="http://blog.g-design.net/post/4789778607/vim-cheat-sheet">http://blog.g-design.net/post/4789778607/vim-cheat-sheet</a><br><a href="http://www.keyxl.com/aaa8263/290/VIM-keyboard-shortcuts.htm">http://www.keyxl.com/aaa8263/290/VIM-keyboard-shortcuts.htm</a><br><a href="http://jmcpherson.org/editing.html">http://jmcpherson.org/editing.html</a><br><a href="http://www.fprintf.net/vimCheatSheet.html">http://www.fprintf.net/vimCheatSheet.html</a><br><a href="http://www.ouyaoxiazai.com/article/24/654.html">http://www.ouyaoxiazai.com/article/24/654.html</a><br><a href="http://bbs.it-home.org/thread-80794-1-1.html">http://bbs.it-home.org/thread-80794-1-1.html</a><br><a href="http://www.lpfrx.com/wp-content/uploads/2008/09/vi.jpg">http://www.lpfrx.com/wp-content/uploads/2008/09/vi.jpg</a><br><a href="http://michael.peopleofhonoronly.com/vim/">http://michael.peopleofhonoronly.com/vim/</a><br><a href="https://github.com/hobbestigrou/vimtips-fortune/blob/master/fortunes/vimtips">https://github.com/hobbestigrou/vimtips-fortune/blob/master/fortunes/vimtips</a><br><a href="https://github.com/glts/vim-cottidie/blob/master/autoload/cottidie/tips">https://github.com/glts/vim-cottidie/blob/master/autoload/cottidie/tips</a></p><h3 id="vim-set-ts-x3D-4-sw-x3D-4-tw-x3D-0-noet-noautoindent-fdm-x3D-manual"><a href="#vim-set-ts-x3D-4-sw-x3D-4-tw-x3D-0-noet-noautoindent-fdm-x3D-manual" class="headerlink" title="vim: set ts=4 sw=4 tw=0 noet noautoindent fdm=manual :"></a>vim: set ts=4 sw=4 tw=0 noet noautoindent fdm=manual :</h3>]]></content>
      
      
      <categories>
          
          <category> cheatsheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几本工具书</title>
      <link href="/posts/3265328804.html"/>
      <url>/posts/3265328804.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python基础教程"><a href="#Python基础教程" class="headerlink" title="Python基础教程"></a>Python基础教程</h2><div class="row">    <embed src="https://repo.dreamerwyx.top/file/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E9%AB%98%E6%B8%85%E4%B8%AD%E6%96%87%E7%89%88.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="Python基础教程-英文原版"><a href="#Python基础教程-英文原版" class="headerlink" title="Python基础教程(英文原版)"></a>Python基础教程(英文原版)</h2><div class="row">    <embed src="https://repo.dreamerwyx.top/file/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E9%AB%98%E6%B8%85%E8%8B%B1%E6%96%87%E7%89%88.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="Linux学习笔记"><a href="#Linux学习笔记" class="headerlink" title="Linux学习笔记"></a>Linux学习笔记</h2><div class="row">    <embed src="https://repo.dreamerwyx.top/file/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash中文速查表</title>
      <link href="/posts/1416232339.html"/>
      <url>/posts/1416232339.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在别的博客看到了很多工具的速查表，但是都是英文的，阅读起来不是很方便。找了很久，终于发现了速查表中文版<a href="https://github.com/skywind3000/awesome-cheatsheets">Github</a>，虽然没有那个博客上面全，但是看起来舒服一点<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>每次都去翻别人的也不是很方便，想把他们fork过来做一个系列，分享给大家，当然会在内容以及排版上更新优化一下。</p><h1 id="Bash-CHEATSHEET-中文速查表"><a href="#Bash-CHEATSHEET-中文速查表" class="headerlink" title="Bash CHEATSHEET 中文速查表"></a>Bash CHEATSHEET 中文速查表</h1><p>by skywind (created on 2018/02/14)  </p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><blockquote><p>默认使用 Emacs 键位</p></blockquote><pre class=" language-bash"><code class="language-bash">CTRL+A              <span class="token comment" spellcheck="true"># 移动到行首，同 &lt;Home></span>CTRL+B              <span class="token comment" spellcheck="true"># 向后移动，同 &lt;Left></span>CTRL+C              <span class="token comment" spellcheck="true"># 结束当前命令</span>CTRL+D              <span class="token comment" spellcheck="true"># 删除光标前的字符，同 &lt;Delete> ，或者没有内容时，退出会话</span>CTRL+E              <span class="token comment" spellcheck="true"># 移动到行末，同 &lt;End></span>CTRL+F              <span class="token comment" spellcheck="true"># 向前移动，同 &lt;Right></span>CTRL+G              <span class="token comment" spellcheck="true"># 退出当前编辑（比如正在 CTRL+R 搜索历史时）</span>CTRL+H              <span class="token comment" spellcheck="true"># 删除光标左边的字符，同 &lt;Backspace></span>CTRL+K              <span class="token comment" spellcheck="true"># 删除光标位置到行末的内容</span>CTRL+L              <span class="token comment" spellcheck="true"># 清屏并重新显示</span>CTRL+N              <span class="token comment" spellcheck="true"># 移动到命令历史的下一行，同 &lt;Down></span>CTRL+O              <span class="token comment" spellcheck="true"># 类似回车，但是会显示下一行历史</span>CTRL+P              <span class="token comment" spellcheck="true"># 移动到命令历史的上一行，同 &lt;Up></span>CTRL+R              <span class="token comment" spellcheck="true"># 历史命令反向搜索，使用 CTRL+G 退出搜索</span>CTRL+S              <span class="token comment" spellcheck="true"># 历史命令正向搜索，使用 CTRL+G 退出搜索</span>CTRL+T              <span class="token comment" spellcheck="true"># 交换前后两个字符</span>CTRL+U              <span class="token comment" spellcheck="true"># 删除字符到行首</span>CTRL+V              <span class="token comment" spellcheck="true"># 输入字符字面量，先按 CTRL+V 再按任意键</span>CTRL+W              <span class="token comment" spellcheck="true"># 删除光标左边的一个单词</span>CTRL+X              <span class="token comment" spellcheck="true"># 列出可能的补全</span>CTRL+Y              <span class="token comment" spellcheck="true"># 粘贴前面 CTRL+u/k/w 删除过的内容</span>CTRL+Z              <span class="token comment" spellcheck="true"># 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台</span>CTRL+_              <span class="token comment" spellcheck="true"># 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7</span>ALT+b               <span class="token comment" spellcheck="true"># 向后（左边）移动一个单词</span>ALT+d               <span class="token comment" spellcheck="true"># 删除光标后（右边）一个单词</span>ALT+f               <span class="token comment" spellcheck="true"># 向前（右边）移动一个单词</span>ALT+t               <span class="token comment" spellcheck="true"># 交换字符</span>ALT+BACKSPACE       <span class="token comment" spellcheck="true"># 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板</span>CTRL+X CTRL+X       <span class="token comment" spellcheck="true"># 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 </span>CTRL+X CTRL+E       <span class="token comment" spellcheck="true"># 用你指定的编辑器，编辑当前命令</span></code></pre><h2 id="Bash-基本操作"><a href="#Bash-基本操作" class="headerlink" title="Bash 基本操作"></a>Bash 基本操作</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span>                <span class="token comment" spellcheck="true"># 退出当前登陆</span><span class="token function">env</span>                 <span class="token comment" spellcheck="true"># 显示环境变量</span><span class="token keyword">echo</span> <span class="token variable">$SHELL</span>         <span class="token comment" spellcheck="true"># 显示你在使用什么 SHELL</span><span class="token function">bash</span>                <span class="token comment" spellcheck="true"># 使用 bash，用 exit 返回</span><span class="token function">which</span> <span class="token function">bash</span>          <span class="token comment" spellcheck="true"># 搜索 $PATH，查找哪个程序对应命令 bash</span><span class="token function">whereis</span> <span class="token function">bash</span>        <span class="token comment" spellcheck="true"># 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库</span>whatis <span class="token function">bash</span>         <span class="token comment" spellcheck="true"># 查看某个命令的解释，一句话告诉你这是干什么的</span><span class="token function">clear</span>               <span class="token comment" spellcheck="true"># 清初屏幕内容</span>reset               <span class="token comment" spellcheck="true"># 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）</span></code></pre><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span>                  <span class="token comment" spellcheck="true"># 返回自己 $HOME 目录</span><span class="token function">cd</span> <span class="token punctuation">{</span>dirname<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 进入目录</span><span class="token function">pwd</span>                 <span class="token comment" spellcheck="true"># 显示当前所在目录</span><span class="token function">mkdir</span> <span class="token punctuation">{</span>dirname<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 创建目录</span><span class="token function">mkdir</span> -p <span class="token punctuation">{</span>dirname<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 递归创建目录</span><span class="token function">pushd</span> <span class="token punctuation">{</span>dirname<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 目录压栈并进入新目录</span><span class="token function">popd</span>                <span class="token comment" spellcheck="true"># 弹出并进入栈顶的目录</span><span class="token function">dirs</span> -v             <span class="token comment" spellcheck="true"># 列出当前目录栈</span><span class="token function">cd</span> -                <span class="token comment" spellcheck="true"># 回到之前的目录</span><span class="token function">cd</span> -<span class="token punctuation">{</span>N<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个</span></code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span>                  <span class="token comment" spellcheck="true"># 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录</span><span class="token function">ls</span> -l               <span class="token comment" spellcheck="true"># 列表方式显示目录内容，包括文件日期，大小，权限等信息</span><span class="token function">ls</span> -1               <span class="token comment" spellcheck="true"># 列表方式显示目录内容，只显示文件名称，减号后面是数字 1</span><span class="token function">ls</span> -a               <span class="token comment" spellcheck="true"># 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）</span><span class="token function">ln</span> -s <span class="token punctuation">{</span>fn<span class="token punctuation">}</span> <span class="token punctuation">{</span>link<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true"># 给指定文件创建一个软链接</span><span class="token function">cp</span> <span class="token punctuation">{</span>src<span class="token punctuation">}</span> <span class="token punctuation">{</span>dest<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）</span><span class="token function">rm</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 删除文件，rm -r 递归删除目录，rm -f 强制删除</span><span class="token function">mv</span> <span class="token punctuation">{</span>src<span class="token punctuation">}</span> <span class="token punctuation">{</span>dest<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 移动文件，如果 dest 是目录，则移动，是文件名则覆盖</span><span class="token function">touch</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 创建或者更新一下制定文件</span><span class="token function">cat</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 输出文件原始内容</span>any_cmd <span class="token operator">></span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 执行任意命令并将标准输出重定向到指定文件</span><span class="token function">more</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 逐屏显示某文件内容，空格翻页，q 退出</span><span class="token function">less</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 更高级点的 more，更多操作，q 退出</span><span class="token function">head</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 显示文件头部数行，可用 head -3 abc.txt 显示头三行</span><span class="token function">tail</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行</span><span class="token function">tail</span> -f <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 持续显示文件尾部数据，可用于监控日志</span><span class="token function">nano</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 使用 nano 编辑器编辑文件</span>vim <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 使用 vim 编辑文件</span><span class="token function">diff</span> <span class="token punctuation">{</span>f1<span class="token punctuation">}</span> <span class="token punctuation">{</span>f2<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 比较两个文件的内容</span><span class="token function">wc</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 统计文件有多少行，多少个单词</span><span class="token function">chmod</span> 644 <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 修改文件权限为 644，可以接 -R 对目录循环改权限</span><span class="token function">chgrp</span> group <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 修改文件所属的用户组</span><span class="token function">chown</span> user1 <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 修改文件所有人为 user1, chown user1:group1 fn 可以修改组</span><span class="token function">file</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 检测文件的类型和编码</span><span class="token function">basename</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>       <span class="token comment" spellcheck="true"># 查看文件的名字（不包括路径）</span><span class="token function">dirname</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 查看文件的路径（不包括名字）</span><span class="token function">grep</span> <span class="token punctuation">{</span>pat<span class="token punctuation">}</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 在文件中查找出现过 pat 的内容</span><span class="token function">grep</span> -r <span class="token punctuation">{</span>pat<span class="token punctuation">}</span> <span class="token keyword">.</span>     <span class="token comment" spellcheck="true"># 在当前目录下递归查找所有出现过 pat 的文件内容</span><span class="token function">stat</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 显示文件的详细信息</span></code></pre><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">whoami</span>              <span class="token comment" spellcheck="true"># 显示我的用户名</span><span class="token function">who</span>                 <span class="token comment" spellcheck="true"># 显示已登陆用户信息，w / who / users 内容略有不同</span>w                   <span class="token comment" spellcheck="true"># 显示已登陆用户信息，w / who / users 内容略有不同</span><span class="token function">users</span>               <span class="token comment" spellcheck="true"># 显示已登陆用户信息，w / who / users 内容略有不同</span><span class="token function">passwd</span>              <span class="token comment" spellcheck="true"># 修改密码，passwd {user} 可以用于 root 修改别人密码</span>finger <span class="token punctuation">{</span>user<span class="token punctuation">}</span>       <span class="token comment" spellcheck="true"># 显示某用户信息，包括 id, 名字, 登陆状态等</span>adduser <span class="token punctuation">{</span>user<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 添加用户</span>deluser <span class="token punctuation">{</span>user<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 删除用户</span>w                   <span class="token comment" spellcheck="true"># 查看谁在线</span><span class="token function">su</span>                  <span class="token comment" spellcheck="true"># 切换到 root 用户</span><span class="token function">su</span> -                <span class="token comment" spellcheck="true"># 切换到 root 用户并登陆（执行登陆脚本）</span><span class="token function">su</span> <span class="token punctuation">{</span>user<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 切换到某用户</span><span class="token function">su</span> -<span class="token punctuation">{</span>user<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 切换到某用户并登陆（执行登陆脚本）</span><span class="token function">id</span> <span class="token punctuation">{</span>user<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 查看用户的 uid，gid 以及所属其他用户组</span><span class="token function">id</span> -u <span class="token punctuation">{</span>user<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 打印用户 uid</span><span class="token function">id</span> -g <span class="token punctuation">{</span>user<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 打印用户 gid</span><span class="token function">write</span> <span class="token punctuation">{</span>user<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 向某用户发送一句消息</span>last                <span class="token comment" spellcheck="true"># 显示最近用户登陆列表</span>last <span class="token punctuation">{</span>user<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true"># 显示登陆记录</span>lastb               <span class="token comment" spellcheck="true"># 显示失败登陆记录</span>lastlog             <span class="token comment" spellcheck="true"># 显示所有用户的最近登陆记录</span><span class="token function">sudo</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># 以 root 权限执行某命令</span></code></pre><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span>                        <span class="token comment" spellcheck="true"># 查看当前会话进程</span><span class="token function">ps</span> ax                     <span class="token comment" spellcheck="true"># 查看所有进程，类似 ps -e</span><span class="token function">ps</span> aux                    <span class="token comment" spellcheck="true"># 查看所有进程详细信息，类似 ps -ef</span><span class="token function">ps</span> auxww                  <span class="token comment" spellcheck="true"># 查看所有进程，并且显示进程的完整启动命令</span><span class="token function">ps</span> -u <span class="token punctuation">{</span>user<span class="token punctuation">}</span>              <span class="token comment" spellcheck="true"># 查看某用户进程</span><span class="token function">ps</span> axjf                   <span class="token comment" spellcheck="true"># 列出进程树</span><span class="token function">ps</span> xjf -u <span class="token punctuation">{</span>user<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 列出某用户的进程树</span><span class="token function">ps</span> -eo pid,user,command   <span class="token comment" spellcheck="true"># 按用户指定的格式查看进程</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> httpd       <span class="token comment" spellcheck="true"># 查看名为 httpd 的所有进程</span><span class="token function">ps</span> --ppid <span class="token punctuation">{</span>pid<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 查看父进程为 pid 的所有进程</span>pstree                    <span class="token comment" spellcheck="true"># 树形列出所有进程，pstree 默认一般不带，需安装</span>pstree <span class="token punctuation">{</span>user<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 进程树列出某用户的进程</span>pstree -u                 <span class="token comment" spellcheck="true"># 树形列出所有进程以及所属用户</span>pgrep <span class="token punctuation">{</span>procname<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 搜索名字匹配的进程的 pid，比如 pgrep apache2</span><span class="token function">kill</span> <span class="token punctuation">{</span>pid<span class="token punctuation">}</span>                <span class="token comment" spellcheck="true"># 结束进程</span><span class="token function">kill</span> -9 <span class="token punctuation">{</span>pid<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 强制结束进程，9/SIGKILL 是强制不可捕获结束信号</span><span class="token function">kill</span> -KILL <span class="token punctuation">{</span>pid<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 强制执行进程，kill -9 的另外一种写法</span><span class="token function">kill</span> -l                   <span class="token comment" spellcheck="true"># 查看所有信号</span><span class="token function">kill</span> -l TERM              <span class="token comment" spellcheck="true"># 查看 TERM 信号的编号</span><span class="token function">killall</span> <span class="token punctuation">{</span>procname<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 按名称结束所有进程</span><span class="token function">pkill</span> <span class="token punctuation">{</span>procname<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 按名称结束进程，除名称外还可以有其他参数</span><span class="token function">top</span>                       <span class="token comment" spellcheck="true"># 查看最活跃的进程</span><span class="token function">top</span> -u <span class="token punctuation">{</span>user<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 查看某用户最活跃的进程</span>any_command <span class="token operator">&amp;</span>             <span class="token comment" spellcheck="true"># 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台</span><span class="token function">jobs</span>                      <span class="token comment" spellcheck="true"># 查看所有后台进程（jobs）</span><span class="token function">bg</span>                        <span class="token comment" spellcheck="true"># 查看后台进程，并切换过去</span><span class="token function">fg</span>                        <span class="token comment" spellcheck="true"># 切换后台进程到前台</span><span class="token function">fg</span> <span class="token punctuation">{</span>job<span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true"># 切换特定后台进程到前台</span><span class="token function">trap</span> cmd sig1 sig2        <span class="token comment" spellcheck="true"># 在脚本中设置信号处理命令</span><span class="token function">trap</span> <span class="token string">""</span> sig1 sig2         <span class="token comment" spellcheck="true"># 在脚本中屏蔽某信号</span><span class="token function">trap</span> - sig1 sig2          <span class="token comment" spellcheck="true"># 恢复默认信号处理行为</span><span class="token function">nohup</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 长期运行某程序，在你退出登陆都保持它运行</span><span class="token function">nohup</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span> <span class="token operator">&amp;</span>         <span class="token comment" spellcheck="true"># 在后台长期运行某程序</span>disown <span class="token punctuation">{</span>PID<span class="token operator">|</span>JID<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 将进程从后台任务列表（jobs）移除</span><span class="token function">wait</span>                      <span class="token comment" spellcheck="true"># 等待所有后台进程任务结束</span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>SSH / 系统信息 / 网络</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> user@host             <span class="token comment" spellcheck="true"># 以用户 user 登陆到远程主机 host</span><span class="token function">ssh</span> -p <span class="token punctuation">{</span>port<span class="token punctuation">}</span> user@host   <span class="token comment" spellcheck="true"># 指定端口登陆主机</span>ssh-copy-id user@host     <span class="token comment" spellcheck="true"># 拷贝你的 ssh key 到远程主机，避免重复输入密码</span><span class="token function">scp</span> <span class="token punctuation">{</span>fn<span class="token punctuation">}</span> user@host:path   <span class="token comment" spellcheck="true"># 拷贝文件到远程主机</span><span class="token function">scp</span> user@host:path dest   <span class="token comment" spellcheck="true"># 从远程主机拷贝文件回来</span><span class="token function">scp</span> -P <span class="token punctuation">{</span>port<span class="token punctuation">}</span> <span class="token punctuation">..</span>.         <span class="token comment" spellcheck="true"># 指定端口远程拷贝文件</span><span class="token function">uname</span> -a                  <span class="token comment" spellcheck="true"># 查看内核版本等信息</span><span class="token function">man</span> <span class="token punctuation">{</span>help<span class="token punctuation">}</span>                <span class="token comment" spellcheck="true"># 查看帮助</span><span class="token function">man</span> -k <span class="token punctuation">{</span>keyword<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># 查看哪些帮助文档里包含了该关键字</span>info <span class="token punctuation">{</span>help<span class="token punctuation">}</span>               <span class="token comment" spellcheck="true"># 查看 info pages，比 man 更强的帮助系统</span><span class="token function">uptime</span>                    <span class="token comment" spellcheck="true"># 查看系统启动时间</span><span class="token function">date</span>                      <span class="token comment" spellcheck="true"># 显示日期</span><span class="token function">cal</span>                       <span class="token comment" spellcheck="true"># 显示日历</span><span class="token function">vmstat</span>                    <span class="token comment" spellcheck="true"># 显示内存和 CPU 使用情况</span><span class="token function">vmstat</span> 10                 <span class="token comment" spellcheck="true"># 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出</span><span class="token function">free</span>                      <span class="token comment" spellcheck="true"># 显示内存和交换区使用情况</span><span class="token function">df</span>                        <span class="token comment" spellcheck="true"># 显示磁盘使用情况</span><span class="token function">du</span>                        <span class="token comment" spellcheck="true"># 显示当前目录占用，du . --max-depth=2 可以指定深度</span><span class="token function">du</span> -h                     <span class="token comment" spellcheck="true"># 显示当前目录占用，-h 以方便阅读的格式输出 (K/M/G)</span><span class="token function">uname</span>                     <span class="token comment" spellcheck="true"># 显示系统版本号</span><span class="token function">hostname</span>                  <span class="token comment" spellcheck="true"># 显示主机名称</span>showkey -a                <span class="token comment" spellcheck="true"># 查看终端发送的按键编码</span><span class="token function">ping</span> <span class="token punctuation">{</span>host<span class="token punctuation">}</span>               <span class="token comment" spellcheck="true"># ping 远程主机并显示结果，CTRL+C 退出</span><span class="token function">ping</span> -c N <span class="token punctuation">{</span>host<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true"># ping 远程主机 N 次</span><span class="token function">traceroute</span> <span class="token punctuation">{</span>host<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true"># 侦测路由连通情况</span><span class="token function">mtr</span> <span class="token punctuation">{</span>host<span class="token punctuation">}</span>                <span class="token comment" spellcheck="true"># 高级版本 traceroute</span>host <span class="token punctuation">{</span>domain<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># DNS 查询，{domain} 前面可加 -a 查看详细信息</span>whois <span class="token punctuation">{</span>domain<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 取得域名 whois 信息</span><span class="token function">dig</span> <span class="token punctuation">{</span>domain<span class="token punctuation">}</span>              <span class="token comment" spellcheck="true"># 取得域名 dns 信息</span>route -n                  <span class="token comment" spellcheck="true"># 查看路由表</span><span class="token function">netstat</span> -a                <span class="token comment" spellcheck="true"># 列出所有端口</span><span class="token function">netstat</span> -an               <span class="token comment" spellcheck="true"># 查看所有连接信息，不解析域名</span><span class="token function">netstat</span> -anp              <span class="token comment" spellcheck="true"># 查看所有连接信息，包含进程信息（需要 sudo）</span><span class="token function">netstat</span> -l                <span class="token comment" spellcheck="true"># 查看所有监听的端口</span><span class="token function">netstat</span> -t                <span class="token comment" spellcheck="true"># 查看所有 TCP 链接</span><span class="token function">netstat</span> -lntu             <span class="token comment" spellcheck="true"># 显示所有正在监听的 TCP 和 UDP 信息</span><span class="token function">netstat</span> -lntup            <span class="token comment" spellcheck="true"># 显示所有正在监听的 socket 及进程信息</span><span class="token function">netstat</span> -i                <span class="token comment" spellcheck="true"># 显示网卡信息</span><span class="token function">netstat</span> -rn               <span class="token comment" spellcheck="true"># 显示当前系统路由表，同 route -n</span>ss -an                    <span class="token comment" spellcheck="true"># 比 netstat -an 更快速更详细</span>ss -s                     <span class="token comment" spellcheck="true"># 统计 TCP 的 established, wait 等</span><span class="token function">wget</span> <span class="token punctuation">{</span>url<span class="token punctuation">}</span>                <span class="token comment" spellcheck="true"># 下载文件，可加 --no-check-certificate 忽略 ssl 验证</span><span class="token function">wget</span> -qO- <span class="token punctuation">{</span>url<span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># 下载文件并输出到标准输出（不保存）</span>curl -sL <span class="token punctuation">{</span>url<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 同 wget -qO- {url} 没有 wget 的时候使用</span>sz <span class="token punctuation">{</span>file<span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true"># 发送文件到终端，zmodem 协议</span>rz                        <span class="token comment" spellcheck="true"># 接收终端发送过来的文件</span></code></pre><h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><pre class=" language-bash"><code class="language-bash">varname<span class="token operator">=</span>value             <span class="token comment" spellcheck="true"># 定义变量</span>varname<span class="token operator">=</span>value <span class="token function">command</span>     <span class="token comment" spellcheck="true"># 定义子进程变量并执行子进程</span><span class="token keyword">echo</span> <span class="token variable">$varname</span>             <span class="token comment" spellcheck="true"># 查看变量内容</span><span class="token keyword">echo</span> $$                   <span class="token comment" spellcheck="true"># 查看当前 shell 的进程号</span><span class="token keyword">echo</span> <span class="token variable">$!</span>                   <span class="token comment" spellcheck="true"># 查看最近调用的后台任务进程号</span><span class="token keyword">echo</span> <span class="token variable">$?</span>                   <span class="token comment" spellcheck="true"># 查看最近一条命令的返回码</span><span class="token function">export</span> VARNAME<span class="token operator">=</span>value      <span class="token comment" spellcheck="true"># 设置环境变量（将会影响到子进程）</span>array<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>valA             <span class="token comment" spellcheck="true"># 定义数组</span>array<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>valBarray<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>valCarray<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>valA <span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>valB <span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>valC<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 另一种方式</span>array<span class="token operator">=</span><span class="token punctuation">(</span>valA valB valC<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 另一种方式</span><span class="token keyword">declare</span> -a                <span class="token comment" spellcheck="true"># 查看所有数组</span><span class="token keyword">declare</span> -f                <span class="token comment" spellcheck="true"># 查看所有函数</span><span class="token keyword">declare</span> -F                <span class="token comment" spellcheck="true"># 查看所有函数，仅显示函数名</span><span class="token keyword">declare</span> -i                <span class="token comment" spellcheck="true"># 查看所有整数</span><span class="token keyword">declare</span> -r                <span class="token comment" spellcheck="true"># 查看所有只读变量</span><span class="token keyword">declare</span> -x                <span class="token comment" spellcheck="true"># 查看所有被导出成环境变量的东西</span><span class="token keyword">declare</span> -p varname        <span class="token comment" spellcheck="true"># 输出变量是怎么定义的（类型+值）</span><span class="token variable">${varname:-word}</span>          <span class="token comment" spellcheck="true"># 如果变量不为空则返回变量，否则返回 word</span><span class="token variable">${varname:=word}</span>          <span class="token comment" spellcheck="true"># 如果变量不为空则返回变量，否则赋值成 word 并返回</span><span class="token variable">${varname:?message}</span>       <span class="token comment" spellcheck="true"># 如果变量不为空则返回变量，否则打印错误信息并退出</span><span class="token variable">${varname:+word}</span>          <span class="token comment" spellcheck="true"># 如果变量不为空则返回 word，否则返回 null</span><span class="token variable">${varname:offset:len}</span>     <span class="token comment" spellcheck="true"># 取得字符串的子字符串</span>$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">#pattern}       # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的</span>$<span class="token punctuation">{</span>variable<span class="token comment" spellcheck="true">##pattern}      # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的</span><span class="token variable">${variable%pattern}</span>       <span class="token comment" spellcheck="true"># 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的</span><span class="token variable">${variable%%pattern}</span>      <span class="token comment" spellcheck="true"># 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的</span><span class="token variable">${variable/pattern/str}</span>   <span class="token comment" spellcheck="true"># 将变量中第一个匹配 pattern 的替换成 str，并返回</span><span class="token variable">${variable//pattern/str}</span>  <span class="token comment" spellcheck="true"># 将变量中所有匹配 pattern 的地方替换成 str 并返回</span>*<span class="token punctuation">(</span>patternlist<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 零次或者多次匹配</span>+<span class="token punctuation">(</span>patternlist<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 一次或者多次匹配</span>?<span class="token punctuation">(</span>patternlist<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 零次或者一次匹配</span>@<span class="token punctuation">(</span>patternlist<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 单词匹配</span><span class="token operator">!</span><span class="token punctuation">(</span>patternlist<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 不匹配</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 按空格分隔 text 成数组，并赋值给变量</span>IFS<span class="token operator">=</span><span class="token string">"/"</span> array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 按斜杆分隔字符串 text 成数组，并赋值给变量</span>text<span class="token operator">=</span><span class="token string">"<span class="token variable">${array[*]}</span>"</span>        <span class="token comment" spellcheck="true"># 用空格链接数组并赋值给变量</span>text<span class="token operator">=</span><span class="token punctuation">$(</span>IFS<span class="token operator">=</span>/<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${array[*]}</span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用斜杠链接数组并赋值给变量</span>A<span class="token operator">=</span><span class="token punctuation">(</span> foo bar <span class="token string">"a  b c"</span> 42 <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数组定义</span>B<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${A[@]:1:2}</span>"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 数组切片：B=( bar "a  b c" )</span>C<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">${A[@]:1}</span>"</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 数组切片：C=( bar "a  b c" 42 )</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${B[@]}</span>"</span>            <span class="token comment" spellcheck="true"># bar a  b c</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${B[1]}</span>"</span>            <span class="token comment" spellcheck="true"># a  b c</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${C[@]}</span>"</span>            <span class="token comment" spellcheck="true"># bar a  b c 42</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">${C[@]: -2:2}</span>"</span>      <span class="token comment" spellcheck="true"># a  b c 42  减号前的空格是必须的</span><span class="token variable"><span class="token variable">$(</span>UNIX <span class="token function">command</span><span class="token variable">)</span></span>           <span class="token comment" spellcheck="true"># 运行命令，并将标准输出内容捕获并返回</span>varname<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u user<span class="token variable">)</span></span>     <span class="token comment" spellcheck="true"># 将用户名为 user 的 uid 赋值给 varname 变量</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> 1 + 2<span class="token variable">)</span></span>         <span class="token comment" spellcheck="true"># 兼容 posix sh 的计算，使用 expr 命令计算结果</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $num + 1<span class="token variable">)</span></span>      <span class="token comment" spellcheck="true"># 数字自增</span><span class="token function">expr</span> 2 \* \<span class="token punctuation">(</span> 2 + 3 \<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 兼容 posix sh 的复杂计算，输出 10</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token variable">))</span></span>            <span class="token comment" spellcheck="true"># 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$num <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span>         <span class="token comment" spellcheck="true"># 变量递增</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span>          <span class="token comment" spellcheck="true"># 变量递增，双括号内的 $ 可以省略</span>num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token variable">))</span></span>  <span class="token comment" spellcheck="true"># 复杂计算</span></code></pre><blockquote><p>由于markdowm原因，这几个命令只能用图片形式：</p></blockquote><p><img src="https://repo.dreamerwyx.top/img/%E6%88%AA%E5%B1%8F2023-04-23%2002.39.54.png"><br><img src="https://repo.dreamerwyx.top/img/%E6%88%AA%E5%B1%8F2023-04-23%2002.43.49.png"></p><h2 id="事件指示符"><a href="#事件指示符" class="headerlink" title="事件指示符"></a>事件指示符</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token operator">!</span>                  <span class="token comment" spellcheck="true"># 上一条命令</span><span class="token operator">!</span>^                  <span class="token comment" spellcheck="true"># 上一条命令的第一个单词</span><span class="token operator">!</span>:n                 <span class="token comment" spellcheck="true"># 上一条命令的第n个单词</span><span class="token operator">!</span>:n-$               <span class="token comment" spellcheck="true"># 上一条命令的第n个单词到最后一个单词</span><span class="token operator">!</span>$                  <span class="token comment" spellcheck="true"># 上一条命令的最后一个单词</span><span class="token operator">!</span>-n:$               <span class="token comment" spellcheck="true"># 上n条命令的最后一个单词</span><span class="token operator">!</span>string             <span class="token comment" spellcheck="true"># 最近一条包含string的命令</span><span class="token operator">!</span>^string1^string2   <span class="token comment" spellcheck="true"># 最近一条包含string1的命令, 快速替换string1为string2</span><span class="token operator">!</span><span class="token comment" spellcheck="true">#                  # 本条命令之前所有的输入内容</span><span class="token operator">!</span><span class="token comment" spellcheck="true">#:n                # 本条命令之前的第n个单词, 快速备份cp /etc/passwd !#:1.bak</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义一个新函数"><a href="#定义一个新函数" class="headerlink" title="定义一个新函数"></a>定义一个新函数</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> myfunc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># $1 代表第一个参数，$N 代表第 N 个参数</span>    <span class="token comment" spellcheck="true"># $# 代表参数个数</span>    <span class="token comment" spellcheck="true"># $0 代表被调用者自身的名字</span>    <span class="token comment" spellcheck="true"># $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd "$@" </span>    <span class="token comment" spellcheck="true"># $* 空格链接起来的所有参数，类型是字符串</span>    <span class="token punctuation">{</span>shell commands <span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">}</span>myfunc                    <span class="token comment" spellcheck="true"># 调用函数 myfunc </span>myfunc arg1 arg2 arg3     <span class="token comment" spellcheck="true"># 带参数的函数调用</span>myfunc <span class="token string">"<span class="token variable">$@</span>"</span>               <span class="token comment" spellcheck="true"># 将所有参数传递给函数</span>myfunc <span class="token string">"<span class="token variable">${array[@]}</span>"</span>      <span class="token comment" spellcheck="true"># 将一个数组当作多个参数传递给函数</span><span class="token function">shift</span>                     <span class="token comment" spellcheck="true"># 参数左移</span>unset -f myfunc           <span class="token comment" spellcheck="true"># 删除函数</span><span class="token keyword">declare</span> -f                <span class="token comment" spellcheck="true"># 列出函数定义</span></code></pre><h2 id="条件判断（兼容-posix-sh-的条件判断）：man-test"><a href="#条件判断（兼容-posix-sh-的条件判断）：man-test" class="headerlink" title="条件判断（兼容 posix sh 的条件判断）：man test"></a>条件判断（兼容 posix sh 的条件判断）：man test</h2><pre class=" language-bash"><code class="language-bash">statement1 <span class="token operator">&amp;&amp;</span> statement2  <span class="token comment" spellcheck="true"># and 操作符</span>statement1 <span class="token operator">||</span> statement2  <span class="token comment" spellcheck="true"># or 操作符</span>exp1 -a exp2              <span class="token comment" spellcheck="true"># exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）</span>exp1 -o exp2              <span class="token comment" spellcheck="true"># exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）</span><span class="token punctuation">(</span> expression <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果 expression 为真时返回真，输入注意括号前反斜杆</span><span class="token operator">!</span> expression              <span class="token comment" spellcheck="true"># 如果 expression 为假那返回真</span>str1 <span class="token operator">=</span> str2               <span class="token comment" spellcheck="true"># 判断字符串相等，如 [ "$x" = "$y" ] &amp;&amp; echo yes</span>str1 <span class="token operator">!=</span> str2              <span class="token comment" spellcheck="true"># 判断字符串不等，如 [ "$x" != "$y" ] &amp;&amp; echo yes</span>str1 <span class="token operator">&lt;</span> str2               <span class="token comment" spellcheck="true"># 字符串小于，如 [ "$x" \&lt; "$y" ] &amp;&amp; echo yes</span>str2 <span class="token operator">></span> str2               <span class="token comment" spellcheck="true"># 字符串大于，注意 &lt; 或 > 是字面量，输入时要加反斜杆</span>-n str1                   <span class="token comment" spellcheck="true"># 判断字符串不为空（长度大于零）</span>-z str1                   <span class="token comment" spellcheck="true"># 判断字符串为空（长度等于零）</span>-a <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，如 [ -a /tmp/abc ] &amp;&amp; echo "exists"</span>-d <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且该文件是一个目录</span>-e <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，和 -a 等价</span>-f <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且该文件是一个普通文件（非目录等）</span>-r <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且可读</span>-s <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且尺寸大于0</span>-w <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且可写</span>-x <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 判断文件存在，且执行</span>-N <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 文件上次修改过后还没有读取过</span>-O <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 文件存在且属于当前用户</span>-G <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 文件存在且匹配你的用户组</span>file1 -nt file2           <span class="token comment" spellcheck="true"># 文件1 比 文件2 新</span>file1 -ot file2           <span class="token comment" spellcheck="true"># 文件1 比 文件2 旧</span>num1 -eq num2             <span class="token comment" spellcheck="true"># 数字判断：num1 == num2</span>num1 -ne num2             <span class="token comment" spellcheck="true"># 数字判断：num1 != num2</span>num1 -lt num2             <span class="token comment" spellcheck="true"># 数字判断：num1 &lt; num2</span>num1 -le num2             <span class="token comment" spellcheck="true"># 数字判断：num1 &lt;= num2</span>num1 -gt num2             <span class="token comment" spellcheck="true"># 数字判断：num1 > num2</span>num1 -ge num2             <span class="token comment" spellcheck="true"># 数字判断：num1 >= num2</span></code></pre><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><blockquote><p>if 和经典 test，兼容 posix sh 的条件判断语句</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">test</span> <span class="token punctuation">{</span>expression<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true"># 判断条件为真的话 test 程序返回0 否则非零</span><span class="token punctuation">[</span> expression <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 判断条件为真的话返回0 否则非零</span><span class="token function">test</span> <span class="token string">"abc"</span> <span class="token operator">=</span> <span class="token string">"def"</span>        <span class="token comment" spellcheck="true"># 查看返回值 echo $? 显示 1，因为条件为假</span><span class="token function">test</span> <span class="token string">"abc"</span> <span class="token operator">!=</span> <span class="token string">"def"</span>       <span class="token comment" spellcheck="true"># 查看返回值 echo $? 显示 0，因为条件为真</span><span class="token function">test</span> -a /tmp<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$?</span>     <span class="token comment" spellcheck="true"># 调用 test 判断 /tmp 是否存在，并打印 test 的返回值</span><span class="token punctuation">[</span> -a /tmp <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$?</span>      <span class="token comment" spellcheck="true"># 和上面完全等价，/tmp 肯定是存在的，所以输出是 0</span><span class="token function">test</span> cond <span class="token operator">&amp;&amp;</span> cmd1         <span class="token comment" spellcheck="true"># 判断条件为真时执行 cmd1</span><span class="token punctuation">[</span> cond <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cmd1          <span class="token comment" spellcheck="true"># 和上面完全等价</span><span class="token punctuation">[</span> cond <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cmd1 <span class="token operator">||</span> cmd2  <span class="token comment" spellcheck="true"># 条件为真执行 cmd1 否则执行 cmd2</span></code></pre><h3 id="判断-x2F-etc-x2F-passwd-文件是否存在"><a href="#判断-x2F-etc-x2F-passwd-文件是否存在" class="headerlink" title="判断 /etc/passwd 文件是否存在"></a>判断 /etc/passwd 文件是否存在</h3><blockquote><p>经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token function">test</span> -e /etc/passwd<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"alright it exists ... "</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"it doesn't exist ... "</span><span class="token keyword">fi</span></code></pre><blockquote><p>和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]<br>这个名字为 “[“ 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -e /etc/passwd <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>       <span class="token keyword">echo</span> <span class="token string">"alright it exists ... "</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"it doesn't exist ... "</span><span class="token keyword">fi</span></code></pre><blockquote><p>和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> -e /etc/passwd <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"alright it exists"</span> <span class="token operator">||</span> <span class="token keyword">echo</span> <span class="token string">"it doesn't exist"</span></code></pre><h3 id="判断变量的值"><a href="#判断变量的值" class="headerlink" title="判断变量的值"></a>判断变量的值</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$varname</span>"</span> <span class="token operator">=</span> <span class="token string">"foo"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"this is foo"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$varname</span>"</span> <span class="token operator">=</span> <span class="token string">"bar"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"this is bar"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"neither"</span><span class="token keyword">fi</span></code></pre><h2 id="复杂条件判断"><a href="#复杂条件判断" class="headerlink" title="复杂条件判断"></a>复杂条件判断</h2><blockquote><p>注意 || 和 &amp;&amp; 是完全兼容 POSIX 的推荐写法。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$x</span> -gt 10 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$x</span> -lt 20 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"yes, between 10 and 20"</span><span class="token keyword">fi</span></code></pre><blockquote><p>可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token variable">$x</span> -gt 10 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$x</span> -lt 20 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"yes, between 10 and 20"</span></code></pre><blockquote><p>小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> \<span class="token punctuation">(</span> <span class="token variable">$x</span> -gt 10 \<span class="token punctuation">)</span> -a \<span class="token punctuation">(</span> <span class="token variable">$x</span> -lt 20 \<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"yes, between 10 and 20"</span><span class="token keyword">fi</span></code></pre><blockquote><p>同样可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> \<span class="token punctuation">(</span> <span class="token variable">$x</span> -gt 10 \<span class="token punctuation">)</span> -a \<span class="token punctuation">(</span> <span class="token variable">$x</span> -lt 20 \<span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"yes, between 10 and 20"</span></code></pre><blockquote><p>判断程序存在的话就执行。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> -x /bin/ls <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> /bin/ls -l</code></pre><blockquote><p>如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:<br><a href="https://www.ibm.com/developerworks/library/l-bash-test/index.html">https://www.ibm.com/developerworks/library/l-bash-test/index.html</a></p></blockquote><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><p>while / for / case / until </p></blockquote><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">while</span> condition<span class="token punctuation">;</span> <span class="token keyword">do</span>    statements<span class="token keyword">done</span>i<span class="token operator">=</span>1<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 10 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>     i<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $i + 1<span class="token variable">)</span></span><span class="token keyword">done</span></code></pre><h3 id="for-循环：上面的-while-语句等价"><a href="#for-循环：上面的-while-语句等价" class="headerlink" title="for 循环：上面的 while 语句等价"></a>for 循环：上面的 while 语句等价</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">{</span>1<span class="token punctuation">..</span>10<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token keyword">for</span> name <span class="token punctuation">[</span>in list<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    statements<span class="token keyword">done</span></code></pre><h3 id="for-列举某目录下面的所有文件"><a href="#for-列举某目录下面的所有文件" class="headerlink" title="for 列举某目录下面的所有文件"></a>for 列举某目录下面的所有文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> f <span class="token keyword">in</span> /home/*<span class="token punctuation">;</span> <span class="token keyword">do</span>     <span class="token keyword">echo</span> <span class="token variable">$f</span><span class="token keyword">done</span></code></pre><blockquote><p>bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> initialisation <span class="token punctuation">;</span> ending condition <span class="token punctuation">;</span> update <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    statements<span class="token keyword">done</span></code></pre><blockquote><p>和上面的写法等价</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token keyword">done</span></code></pre><h3 id="case-判断"><a href="#case-判断" class="headerlink" title="case 判断"></a>case 判断</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">case</span> expression <span class="token keyword">in</span>     pattern1 <span class="token punctuation">)</span>        statements <span class="token punctuation">;</span><span class="token punctuation">;</span>    pattern2 <span class="token punctuation">)</span>        statements <span class="token punctuation">;</span><span class="token punctuation">;</span>    * <span class="token punctuation">)</span>        otherwise <span class="token punctuation">;</span><span class="token punctuation">;</span>esac</code></pre><h3 id="until-语句"><a href="#until-语句" class="headerlink" title="until 语句"></a>until 语句</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">until</span> condition<span class="token punctuation">;</span> <span class="token keyword">do</span>    statements<span class="token keyword">done</span></code></pre><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">select</span> name <span class="token punctuation">[</span>in list<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  statements that can use <span class="token variable">$name</span><span class="token keyword">done</span></code></pre><h2 id="命令处理"><a href="#命令处理" class="headerlink" title="命令处理"></a>命令处理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token function">ls</span>                         <span class="token comment" spellcheck="true"># 忽略 alias 直接执行程序或者内建命令 ls</span><span class="token function">builtin</span> <span class="token function">cd</span>                         <span class="token comment" spellcheck="true"># 忽略 alias 直接运行内建的 cd 命令</span><span class="token function">enable</span>                             <span class="token comment" spellcheck="true"># 列出所有 bash 内置命令，或禁止某命令</span><span class="token function">help</span> <span class="token punctuation">{</span>builtin_command<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># 查看内置命令的帮助（仅限 bash 内置命令）</span><span class="token function">eval</span> <span class="token variable">$script</span>                       <span class="token comment" spellcheck="true"># 对 script 变量中的字符串求值（执行）</span></code></pre><h2 id="输出-x2F-输入-重定向"><a href="#输出-x2F-输入-重定向" class="headerlink" title="输出/输入 重定向"></a>输出/输入 重定向</h2><pre class=" language-bash"><code class="language-bash">cmd1 <span class="token operator">|</span> cmd2                        <span class="token comment" spellcheck="true"># 管道，cmd1 的标准输出接到 cmd2 的标准输入</span><span class="token operator">&lt;</span> <span class="token function">file</span>                             <span class="token comment" spellcheck="true"># 将文件内容重定向为命令的标准输入</span><span class="token operator">></span> <span class="token function">file</span>                             <span class="token comment" spellcheck="true"># 将命令的标准输出重定向到文件，会覆盖文件</span><span class="token operator">>></span> <span class="token function">file</span>                            <span class="token comment" spellcheck="true"># 将命令的标准输出重定向到文件，追加不覆盖</span><span class="token operator">></span><span class="token operator">|</span> <span class="token function">file</span>                            <span class="token comment" spellcheck="true"># 强制输出到文件，即便设置过：set -o noclobber</span>n<span class="token operator">></span><span class="token operator">|</span> <span class="token function">file</span>                           <span class="token comment" spellcheck="true"># 强制将文件描述符 n的输出重定向到文件</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">file</span>                            <span class="token comment" spellcheck="true"># 同时使用该文件作为标准输入和标准输出</span>n<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">file</span>                           <span class="token comment" spellcheck="true"># 同时使用文件作为文件描述符 n 的输出和输入</span>n<span class="token operator">></span> <span class="token function">file</span>                            <span class="token comment" spellcheck="true"># 重定向文件描述符 n 的输出到文件</span>n<span class="token operator">&lt;</span> <span class="token function">file</span>                            <span class="token comment" spellcheck="true"># 重定向文件描述符 n 的输入为文件内容</span>n<span class="token operator">></span><span class="token operator">&amp;</span>                                <span class="token comment" spellcheck="true"># 将标准输出 dup/合并 到文件描述符 n</span>n<span class="token operator">&lt;</span><span class="token operator">&amp;</span>                                <span class="token comment" spellcheck="true"># 将标准输入 dump/合并 定向为描述符 n</span>n<span class="token operator">></span><span class="token operator">&amp;</span>m                               <span class="token comment" spellcheck="true"># 文件描述符 n 被作为描述符 m 的副本，输出用</span>n<span class="token operator">&lt;</span><span class="token operator">&amp;</span>m                               <span class="token comment" spellcheck="true"># 文件描述符 n 被作为描述符 m 的副本，输入用</span><span class="token operator">&amp;</span><span class="token operator">></span>file                             <span class="token comment" spellcheck="true"># 将标准输出和标准错误重定向到文件</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>-                                <span class="token comment" spellcheck="true"># 关闭标准输入</span><span class="token operator">></span><span class="token operator">&amp;</span>-                                <span class="token comment" spellcheck="true"># 关闭标准输出</span>n<span class="token operator">></span><span class="token operator">&amp;</span>-                               <span class="token comment" spellcheck="true"># 关闭作为输出的文件描述符 n</span>n<span class="token operator">&lt;</span><span class="token operator">&amp;</span>-                               <span class="token comment" spellcheck="true"># 关闭作为输入的文件描述符 n</span><span class="token function">diff</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>cmd1<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>cmd2<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 比较两个命令的输出</span></code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cut</span> -c 1-16                        <span class="token comment" spellcheck="true"># 截取每行头16个字符</span><span class="token function">cut</span> -c 1-16 <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 截取指定文件中每行头 16个字符</span><span class="token function">cut</span> -c3-                           <span class="token comment" spellcheck="true"># 截取每行从第三个字符开始到行末的内容</span><span class="token function">cut</span> -d<span class="token string">':'</span> -f5                      <span class="token comment" spellcheck="true"># 截取用冒号分隔的第五列内容</span><span class="token function">cut</span> -d<span class="token string">';'</span> -f2,10                   <span class="token comment" spellcheck="true"># 截取用分号分隔的第二和第十列内容</span><span class="token function">cut</span> -d<span class="token string">' '</span> -f3-7                    <span class="token comment" spellcheck="true"># 截取空格分隔的三到七列</span><span class="token keyword">echo</span> <span class="token string">"hello"</span> <span class="token operator">|</span> <span class="token function">cut</span> -c1-3           <span class="token comment" spellcheck="true"># 显示 hel</span><span class="token keyword">echo</span> <span class="token string">"hello sir"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">' '</span> -f2   <span class="token comment" spellcheck="true"># 显示 sir</span><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">tr</span> -s <span class="token string">" "</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">" "</span> -f 2,3,4  <span class="token comment" spellcheck="true"># cut 搭配 tr 压缩字符</span></code></pre><h3 id="awk-x2F-sed"><a href="#awk-x2F-sed" class="headerlink" title="awk / sed"></a>awk / sed</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span> <span class="token function">file</span>              <span class="token comment" spellcheck="true"># 打印文件中以空格分隔的第五列</span><span class="token function">awk</span> -F <span class="token string">','</span> <span class="token string">'{print <span class="token variable">$5</span>}'</span> <span class="token function">file</span>       <span class="token comment" spellcheck="true"># 打印文件中以逗号分隔的第五列</span><span class="token function">awk</span> <span class="token string">'/str/ {print <span class="token variable">$2</span>}'</span> <span class="token function">file</span>        <span class="token comment" spellcheck="true"># 打印文件中包含 str 的所有行的第二列</span><span class="token function">awk</span> -F <span class="token string">','</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span> <span class="token function">file</span>      <span class="token comment" spellcheck="true"># 打印逗号分隔的文件中的每行最后一列 </span><span class="token function">awk</span> <span class="token string">'{s+=<span class="token variable">$1</span>} END {print s}'</span> <span class="token function">file</span>   <span class="token comment" spellcheck="true"># 计算所有第一列的合</span><span class="token function">awk</span> <span class="token string">'NR%3==1'</span> <span class="token function">file</span>                 <span class="token comment" spellcheck="true"># 从第一行开始，每隔三行打印一行</span><span class="token function">sed</span> <span class="token string">'s/find/replace/'</span> <span class="token function">file</span>         <span class="token comment" spellcheck="true"># 替换文件中首次出现的字符串并输出结果 </span><span class="token function">sed</span> <span class="token string">'10s/find/replace/'</span> <span class="token function">file</span>       <span class="token comment" spellcheck="true"># 替换文件第 10 行内容</span><span class="token function">sed</span> <span class="token string">'10,20s/find/replace/'</span> <span class="token function">file</span>    <span class="token comment" spellcheck="true"># 替换文件中 10-20 行内容</span><span class="token function">sed</span> -r <span class="token string">'s/regex/replace/g'</span> <span class="token function">file</span>    <span class="token comment" spellcheck="true"># 替换文件中所有出现的字符串</span><span class="token function">sed</span> -i <span class="token string">'s/find/replace/g'</span> <span class="token function">file</span>     <span class="token comment" spellcheck="true"># 替换文件中所有出现的字符并且覆盖文件</span><span class="token function">sed</span> -i <span class="token string">'/find/i\newline'</span> <span class="token function">file</span>      <span class="token comment" spellcheck="true"># 在文件的匹配文本前插入行</span><span class="token function">sed</span> -i <span class="token string">'/find/a\newline'</span> <span class="token function">file</span>      <span class="token comment" spellcheck="true"># 在文件的匹配文本后插入行</span><span class="token function">sed</span> <span class="token string">'/line/s/find/replace/'</span> <span class="token function">file</span>   <span class="token comment" spellcheck="true"># 先搜索行特征再执行替换</span><span class="token function">sed</span> -e <span class="token string">'s/f/r/'</span> -e <span class="token string">'s/f/r'</span> <span class="token function">file</span>    <span class="token comment" spellcheck="true"># 执行多次替换</span><span class="token function">sed</span> <span class="token string">'s#find#replace#'</span> <span class="token function">file</span>         # 使用 # 替换 / 来避免 pattern 中有斜杆<span class="token function">sed</span> -i -r <span class="token string">'s/^\s+//g'</span> <span class="token function">file</span>         <span class="token comment" spellcheck="true"># 删除文件每行头部空格</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 删除文件空行并打印</span><span class="token function">sed</span> -i <span class="token string">'s/\s\+$//'</span> <span class="token function">file</span>            <span class="token comment" spellcheck="true"># 删除文件每行末尾多余空格</span><span class="token function">sed</span> -n <span class="token string">'2p'</span> <span class="token function">file</span>                   <span class="token comment" spellcheck="true"># 打印文件第二行</span><span class="token function">sed</span> -n <span class="token string">'2,5p'</span> <span class="token function">file</span>                 <span class="token comment" spellcheck="true"># 打印文件第二到第五行</span></code></pre><h2 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 - sort"></a>排序 - sort</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sort</span> <span class="token function">file</span>                          <span class="token comment" spellcheck="true"># 排序文件</span><span class="token function">sort</span> -r <span class="token function">file</span>                       <span class="token comment" spellcheck="true"># 反向排序（降序）</span><span class="token function">sort</span> -n <span class="token function">file</span>                       <span class="token comment" spellcheck="true"># 使用数字而不是字符串进行比较</span><span class="token function">sort</span> -t: -k 3n /etc/passwd         <span class="token comment" spellcheck="true"># 按 passwd 文件的第三列进行排序</span><span class="token function">sort</span> -u <span class="token function">file</span>                       <span class="token comment" spellcheck="true"># 去重排序</span><span class="token function">sort</span> -h <span class="token function">file</span>                       <span class="token comment" spellcheck="true"># 支持 K/M/G 等量级符号，可与 du 结合使用</span></code></pre><h2 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /path/to/z.sh               <span class="token comment" spellcheck="true"># .bashrc 中初始化 z.sh</span>z                                  <span class="token comment" spellcheck="true"># 列出所有历史路径以及他们的权重</span>z foo                              <span class="token comment" spellcheck="true"># 跳到历史路径中匹配 foo 的权重最大的目录</span>z foo bar                          <span class="token comment" spellcheck="true"># 跳到历史路径中匹配 foo 和 bar 权重最大的目录</span>z -l foo                           <span class="token comment" spellcheck="true"># 列出所有历史路径中匹配 foo 的目录及权重</span>z -r foo                           <span class="token comment" spellcheck="true"># 按照最高访问次数优先进行匹配跳转</span>z -t foo                           <span class="token comment" spellcheck="true"># 按照最近访问优先进行匹配跳转</span></code></pre><h2 id="键盘绑定"><a href="#键盘绑定" class="headerlink" title="键盘绑定"></a>键盘绑定</h2><pre class=" language-bash"><code class="language-bash">bind <span class="token string">'"\eh":"\C-b"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+h 为光标左移，同 CTRL+b / &lt;Left></span>bind <span class="token string">'"\el":"\C-f"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+l 为光标右移，同 CTRL+f / &lt;Right></span>bind <span class="token string">'"\ej":"\C-n"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+j 为下条历史，同 CTRL+n / &lt;Down></span>bind <span class="token string">'"\ek":"\C-p"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+k 为上条历史，同 CTRL+p / &lt;Up></span>bind <span class="token string">'"\eH":"\eb"'</span>                 <span class="token comment" spellcheck="true"># 绑定 ALT+H 为光标左移一个单词，同 ALT-b </span>bind <span class="token string">'"\eL":"\ef"'</span>                 <span class="token comment" spellcheck="true"># 绑定 ALT+L 为光标右移一个单词，同 ALT-f </span>bind <span class="token string">'"\eJ":"\C-a"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+J 为移动到行首，同 CTRL+a / &lt;Home></span>bind <span class="token string">'"\eK":"\C-e"'</span>                <span class="token comment" spellcheck="true"># 绑定 ALT+K 为移动到行末，同 CTRL+e / &lt;End></span>bind <span class="token string">'"\e;":"ls -l\n"'</span>             <span class="token comment" spellcheck="true"># 绑定 ALT+; 为执行 ls -l 命令</span></code></pre><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><blockquote><p>ip / ifconfig / nmap …</p></blockquote><pre class=" language-bash"><code class="language-bash">ip a                               <span class="token comment" spellcheck="true"># 显示所有网络地址，同 ip address</span>ip a show eth1                     <span class="token comment" spellcheck="true"># 显示网卡 IP 地址</span>ip a add 172.16.1.23/24 dev eth1   <span class="token comment" spellcheck="true"># 添加网卡 IP 地址</span>ip a del 172.16.1.23/24 dev eth1   <span class="token comment" spellcheck="true"># 删除网卡 IP 地址</span>ip <span class="token function">link</span> show dev eth0              <span class="token comment" spellcheck="true"># 显示网卡设备属性</span>ip <span class="token function">link</span> <span class="token keyword">set</span> eth1 up                <span class="token comment" spellcheck="true"># 激活网卡</span>ip <span class="token function">link</span> <span class="token keyword">set</span> eth1 down              <span class="token comment" spellcheck="true"># 关闭网卡</span>ip <span class="token function">link</span> <span class="token keyword">set</span> eth1 address <span class="token punctuation">{</span>mac<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 修改 MAC 地址</span>ip neighbour                       <span class="token comment" spellcheck="true"># 查看 ARP 缓存</span>ip route                           <span class="token comment" spellcheck="true"># 查看路由表</span>ip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    <span class="token comment" spellcheck="true"># 添加静态路由</span>ip route del 10.1.0.0/24           <span class="token comment" spellcheck="true"># 删除静态路由</span><span class="token function">ifconfig</span>                           <span class="token comment" spellcheck="true"># 显示所有网卡和接口信息</span><span class="token function">ifconfig</span> -a                        <span class="token comment" spellcheck="true"># 显示所有网卡（包括开机没启动的）信息</span><span class="token function">ifconfig</span> eth0                      <span class="token comment" spellcheck="true"># 指定设备显示信息</span><span class="token function">ifconfig</span> eth0 up                   <span class="token comment" spellcheck="true"># 激活网卡</span><span class="token function">ifconfig</span> eth0 down                 <span class="token comment" spellcheck="true"># 关闭网卡</span><span class="token function">ifconfig</span> eth0 192.168.120.56       <span class="token comment" spellcheck="true"># 给网卡配置 IP 地址</span><span class="token function">ifconfig</span> eth0 10.0.0.8 netmask 255.255.255.0 up     <span class="token comment" spellcheck="true"># 配置 IP 并启动</span><span class="token function">ifconfig</span> eth0 hw ether 00:aa:bb:cc:dd:ee            <span class="token comment" spellcheck="true"># 修改 MAC 地址</span>nmap 10.0.0.12                     <span class="token comment" spellcheck="true"># 扫描主机 1-1000 端口</span>nmap -p 1024-65535 10.0.0.12       <span class="token comment" spellcheck="true"># 扫描给定端口</span>nmap 10.0.0.0/24                   <span class="token comment" spellcheck="true"># 给定网段扫描局域网内所有主机</span>nmap -O -sV 10.0.0.12              <span class="token comment" spellcheck="true"># 探测主机服务和操作系统版本</span></code></pre><h2 id="有趣的命令"><a href="#有趣的命令" class="headerlink" title="有趣的命令"></a>有趣的命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">man</span> hier                           <span class="token comment" spellcheck="true"># 查看文件系统的结构和含义</span><span class="token function">man</span> <span class="token function">test</span>                           <span class="token comment" spellcheck="true"># 查看 posix sh 的条件判断帮助</span><span class="token function">man</span> ascii                          <span class="token comment" spellcheck="true"># 显示 ascii 表</span>getconf LONG_BIT                   <span class="token comment" spellcheck="true"># 查看系统是 32 位还是 64 位</span>bind -P                            <span class="token comment" spellcheck="true"># 列出所有 bash 的快捷键</span><span class="token function">mount</span> <span class="token operator">|</span> column -t                  <span class="token comment" spellcheck="true"># 漂亮的列出当前加载的文件系统</span>curl ip.cn                         <span class="token comment" spellcheck="true"># 取得外网 ip 地址和服务商信息</span>disown -a <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span>                  <span class="token comment" spellcheck="true"># 关闭所有后台任务并退出</span><span class="token function">cat</span> /etc/issue                     <span class="token comment" spellcheck="true"># 查看 Linux 发行版信息</span><span class="token function">lsof</span> -i port:80                    <span class="token comment" spellcheck="true"># 哪个程序在使用 80 端口？</span>showkey -a                         <span class="token comment" spellcheck="true"># 取得按键的 ASCII 码</span>svn <span class="token function">diff</span> <span class="token operator">|</span> view -                  <span class="token comment" spellcheck="true"># 使用 Vim 来显示带色彩的 diff 输出</span><span class="token function">mv</span> filename.<span class="token punctuation">{</span>old,new<span class="token punctuation">}</span>              <span class="token comment" spellcheck="true"># 快速文件改名</span><span class="token function">time</span> <span class="token function">read</span>                          <span class="token comment" spellcheck="true"># 使用 CTRL-D 停止，最简单的计时功能</span><span class="token function">cp</span> file.txt<span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true"># 快速备份文件</span><span class="token function">sudo</span> <span class="token function">touch</span> /forcefsck              <span class="token comment" spellcheck="true"># 强制在下次重启时扫描磁盘</span><span class="token function">find</span> ~ -mmin 60 -type f            <span class="token comment" spellcheck="true"># 查找 $HOME 目录中，60 分钟内修改过的文件</span>curl wttr.in/~beijing              <span class="token comment" spellcheck="true"># 查看北京的天气预报</span><span class="token keyword">echo</span> <span class="token variable">${SSH_CLIENT%% *}</span>             <span class="token comment" spellcheck="true"># 取得你是从什么 IP 链接到当前主机上的</span><span class="token keyword">echo</span> $<span class="token punctuation">[</span>RANDOM%X+1<span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true"># 取得 1 到 X 之间的随机数</span>bind -x <span class="token string">'"\C-l":ls -l'</span>             <span class="token comment" spellcheck="true"># 设置 CTRL+l 为执行 ls -l 命令</span><span class="token function">find</span> / -type f -size +5M           <span class="token comment" spellcheck="true"># 查找大于 5M 的文件</span><span class="token function">chmod</span> --reference f1 f2            <span class="token comment" spellcheck="true"># 将 f2 的权限设置成 f1 一模一样的</span>curl -L cheat.sh                   <span class="token comment" spellcheck="true"># 速查表大全</span></code></pre><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="列出最常使用的命令"><a href="#列出最常使用的命令" class="headerlink" title="列出最常使用的命令"></a>列出最常使用的命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{a[<span class="token variable">$2</span>]++}END{for(i in a){print a[i] " " i}}'</span> <span class="token operator">|</span> <span class="token function">sort</span> -rn <span class="token operator">|</span> <span class="token function">head</span></code></pre><h3 id="列出所有网络状态：ESTABLISHED-x2F-TIME-WAIT-x2F-FIN-WAIT1-x2F-FIN-WAIT2"><a href="#列出所有网络状态：ESTABLISHED-x2F-TIME-WAIT-x2F-FIN-WAIT1-x2F-FIN-WAIT2" class="headerlink" title="列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2"></a>列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -n <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^tcp/ {++tt[<span class="token variable">$NF</span>]} END {for (a in tt) print a, tt[a]}'</span></code></pre><h3 id="通过-SSH-来-mount-文件系统"><a href="#通过-SSH-来-mount-文件系统" class="headerlink" title="通过 SSH 来 mount 文件系统"></a>通过 SSH 来 mount 文件系统</h3><pre class=" language-bash"><code class="language-bash">sshfs name@server:/path/to/folder /path/to/mount/point</code></pre><h3 id="显示前十个运行的进程并按内存使用量排序"><a href="#显示前十个运行的进程并按内存使用量排序" class="headerlink" title="显示前十个运行的进程并按内存使用量排序"></a>显示前十个运行的进程并按内存使用量排序</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">sort</span> -nk +4 <span class="token operator">|</span> <span class="token function">tail</span></code></pre><h3 id="在右上角显示时钟"><a href="#在右上角显示时钟" class="headerlink" title="在右上角显示时钟"></a>在右上角显示时钟</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token function">sleep</span> 1<span class="token punctuation">;</span><span class="token keyword">do</span> tput sc<span class="token punctuation">;</span>tput cup 0 <span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>tput cols<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">29</span><span class="token variable">))</span></span><span class="token punctuation">;</span><span class="token function">date</span><span class="token punctuation">;</span>tput rc<span class="token punctuation">;</span><span class="token keyword">done</span><span class="token operator">&amp;</span></code></pre><h3 id="从网络上的压缩文件中解出一个文件来，并避免保存中间文件"><a href="#从网络上的压缩文件中解出一个文件来，并避免保存中间文件" class="headerlink" title="从网络上的压缩文件中解出一个文件来，并避免保存中间文件"></a>从网络上的压缩文件中解出一个文件来，并避免保存中间文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -qO - <span class="token string">"http://www.tarball.com/tarball.gz"</span> <span class="token operator">|</span> <span class="token function">tar</span> zxvf -</code></pre><h3 id="性能测试：测试处理器性能"><a href="#性能测试：测试处理器性能" class="headerlink" title="性能测试：测试处理器性能"></a>性能测试：测试处理器性能</h3><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import test.pystone;print(test.pystone.pystones())"</span></code></pre><h3 id="性能测试：测试内存带宽"><a href="#性能测试：测试内存带宽" class="headerlink" title="性能测试：测试内存带宽"></a>性能测试：测试内存带宽</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/dev/null bs<span class="token operator">=</span>1M count<span class="token operator">=</span>32768</code></pre><h3 id="Linux-下挂载一个-iso-文件"><a href="#Linux-下挂载一个-iso-文件" class="headerlink" title="Linux 下挂载一个 iso 文件"></a>Linux 下挂载一个 iso 文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> /path/to/file.iso /mnt/cdrom -oloop</code></pre><h3 id="通过主机-A-直接-ssh-到主机-B"><a href="#通过主机-A-直接-ssh-到主机-B" class="headerlink" title="通过主机 A 直接 ssh 到主机 B"></a>通过主机 A 直接 ssh 到主机 B</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -t hostA <span class="token function">ssh</span> hostB```bash<span class="token comment" spellcheck="true">### 下载一个网站的所有图片</span>```bash<span class="token function">wget</span> -r -l1 --no-parent -nH -nd -P/tmp -A<span class="token string">".gif,.jpg"</span> http://example.com/images</code></pre><h3 id="快速创建项目目录"><a href="#快速创建项目目录" class="headerlink" title="快速创建项目目录"></a>快速创建项目目录</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p work/<span class="token punctuation">{</span>project1,project2<span class="token punctuation">}</span>/<span class="token punctuation">{</span>src,bin,bak<span class="token punctuation">}</span></code></pre><h3 id="按日期范围查找文件"><a href="#按日期范围查找文件" class="headerlink" title="按日期范围查找文件"></a>按日期范围查找文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -newermt <span class="token string">"2010-01-01"</span> <span class="token operator">!</span> -newermt <span class="token string">"2010-06-01"</span></code></pre><h3 id="显示当前正在使用网络的进程"><a href="#显示当前正在使用网络的进程" class="headerlink" title="显示当前正在使用网络的进程"></a>显示当前正在使用网络的进程</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">lsof</span> -P -i -n <span class="token operator">|</span> <span class="token function">cut</span> -f 1 -d <span class="token string">" "</span><span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> <span class="token function">tail</span> -n +2</code></pre><h3 id="Vim-中保存一个没有权限的文件"><a href="#Vim-中保存一个没有权限的文件" class="headerlink" title="Vim 中保存一个没有权限的文件"></a>Vim 中保存一个没有权限的文件</h3><pre class=" language-bash"><code class="language-bash">:w <span class="token operator">!</span>sudo <span class="token function">tee</span> <span class="token operator">></span> /dev/null %</code></pre><h3 id="在-bashrc-x2F-bash-profile-中加载另外一个文件（比如你保存在-github-上的配置）"><a href="#在-bashrc-x2F-bash-profile-中加载另外一个文件（比如你保存在-github-上的配置）" class="headerlink" title="在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）"></a>在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/github/profiles/my_bash_init.sh</code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote><p>将外网主机（202.115.8.1）端口（8443）转发到内网主机 192.168.1.2:443</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -CqTnN -R 0.0.0.0:8443:192.168.1.2:443  user@202.115.8.1</code></pre><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote><p>将本地主机的 8443 端口，通过 192.168.1.3 转发到 192.168.1.2:443 </p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -CqTnN -L 0.0.0.0:8443:192.168.1.2:443  user@192.168.1.3</code></pre><h3 id="socks5-代理"><a href="#socks5-代理" class="headerlink" title="socks5 代理"></a>socks5 代理</h3><blockquote><p>把本地 1080 端口的 socks5 的代理请求通过远程主机转发出去</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -CqTnN -D localhost:1080  user@202.115.8.1</code></pre><h3 id="终端下正确设置-ALT-键和-BackSpace-键"><a href="#终端下正确设置-ALT-键和-BackSpace-键" class="headerlink" title="终端下正确设置 ALT 键和 BackSpace 键"></a>终端下正确设置 ALT 键和 BackSpace 键</h3><p><a href="http://www.skywind.me/blog/archives/2021">http://www.skywind.me/blog/archives/2021</a></p><h2 id="有用的函数"><a href="#有用的函数" class="headerlink" title="有用的函数"></a>有用的函数</h2><h3 id="自动解压"><a href="#自动解压" class="headerlink" title="自动解压"></a>自动解压</h3><blockquote><p>判断文件后缀名并调用相应解压命令</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> q-extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token variable">$1</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>        *.tar.bz2<span class="token punctuation">)</span>   <span class="token function">tar</span> -xvjf <span class="token variable">$1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar.gz<span class="token punctuation">)</span>    <span class="token function">tar</span> -xvzf <span class="token variable">$1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar.xz<span class="token punctuation">)</span>    <span class="token function">tar</span> -xvJf <span class="token variable">$1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.bz2<span class="token punctuation">)</span>       bunzip2 <span class="token variable">$1</span>     <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.rar<span class="token punctuation">)</span>       <span class="token function">rar</span> x <span class="token variable">$1</span>       <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.gz<span class="token punctuation">)</span>        gunzip <span class="token variable">$1</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar<span class="token punctuation">)</span>       <span class="token function">tar</span> -xvf <span class="token variable">$1</span>     <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tbz2<span class="token punctuation">)</span>      <span class="token function">tar</span> -xvjf <span class="token variable">$1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tgz<span class="token punctuation">)</span>       <span class="token function">tar</span> -xvzf <span class="token variable">$1</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.zip<span class="token punctuation">)</span>       unzip <span class="token variable">$1</span>       <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.Z<span class="token punctuation">)</span>         uncompress <span class="token variable">$1</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.7z<span class="token punctuation">)</span>        7z x <span class="token variable">$1</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span>           <span class="token keyword">echo</span> <span class="token string">"don't know how to extract '<span class="token variable">$1</span>'..."</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        esac    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"'<span class="token variable">$1</span>' is not a valid file!"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span></code></pre><h3 id="自动压缩：判断后缀名并调用相应压缩程序"><a href="#自动压缩：判断后缀名并调用相应压缩程序" class="headerlink" title="自动压缩：判断后缀名并调用相应压缩程序"></a>自动压缩：判断后缀名并调用相应压缩程序</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> q-compress<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        FILE<span class="token operator">=</span><span class="token variable">$1</span>        <span class="token keyword">case</span> <span class="token variable">$FILE</span> <span class="token keyword">in</span>        *.tar<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -cf <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar.bz2<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -cjf <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar.xz<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -cJf <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tar.gz<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -czf <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.tgz<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> -czf <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.zip<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">zip</span> <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *.rar<span class="token punctuation">)</span> <span class="token function">shift</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rar</span> <span class="token variable">$FILE</span> <span class="token variable">$*</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        esac    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"usage: q-compress &lt;foo.tar.gz> ./foo ./bar"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span></code></pre><h3 id="漂亮的带语法高亮的-color-cat-，需要先-pip-install-pygments"><a href="#漂亮的带语法高亮的-color-cat-，需要先-pip-install-pygments" class="headerlink" title="漂亮的带语法高亮的 color cat ，需要先 pip install pygments"></a>漂亮的带语法高亮的 color cat ，需要先 pip install pygments</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> ccat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    local style<span class="token operator">=</span><span class="token string">"monokai"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -eq 0 ]; then</span>        pygmentize -P style<span class="token operator">=</span><span class="token variable">$style</span> -P tabsize<span class="token operator">=</span>4 -f terminal256 -g    <span class="token keyword">else</span>        <span class="token keyword">for</span> NAME <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span>            pygmentize -P style<span class="token operator">=</span><span class="token variable">$style</span> -P tabsize<span class="token operator">=</span>4 -f terminal256 -g <span class="token string">"<span class="token variable">$NAME</span>"</span>        <span class="token keyword">done</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span></code></pre><h2 id="好玩的配置"><a href="#好玩的配置" class="headerlink" title="好玩的配置"></a>好玩的配置</h2><h3 id="放到你的-x2F-bashrc-配置文件中，给-man-增加漂亮的色彩高亮"><a href="#放到你的-x2F-bashrc-配置文件中，给-man-增加漂亮的色彩高亮" class="headerlink" title="放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮"></a>放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> LESS_TERMCAP_mb<span class="token operator">=</span>$<span class="token string">'\E[1m\E[32m'</span><span class="token function">export</span> LESS_TERMCAP_mh<span class="token operator">=</span>$<span class="token string">'\E[2m'</span><span class="token function">export</span> LESS_TERMCAP_mr<span class="token operator">=</span>$<span class="token string">'\E[7m'</span><span class="token function">export</span> LESS_TERMCAP_md<span class="token operator">=</span>$<span class="token string">'\E[1m\E[36m'</span><span class="token function">export</span> LESS_TERMCAP_ZW<span class="token operator">=</span><span class="token string">""</span><span class="token function">export</span> LESS_TERMCAP_us<span class="token operator">=</span>$<span class="token string">'\E[4m\E[1m\E[37m'</span><span class="token function">export</span> LESS_TERMCAP_me<span class="token operator">=</span>$<span class="token string">'\E(B\E[m'</span><span class="token function">export</span> LESS_TERMCAP_ue<span class="token operator">=</span>$<span class="token string">'\E[24m\E(B\E[m'</span><span class="token function">export</span> LESS_TERMCAP_ZO<span class="token operator">=</span><span class="token string">""</span><span class="token function">export</span> LESS_TERMCAP_ZN<span class="token operator">=</span><span class="token string">""</span><span class="token function">export</span> LESS_TERMCAP_se<span class="token operator">=</span>$<span class="token string">'\E[27m\E(B\E[m'</span><span class="token function">export</span> LESS_TERMCAP_ZV<span class="token operator">=</span><span class="token string">""</span><span class="token function">export</span> LESS_TERMCAP_so<span class="token operator">=</span>$<span class="token string">'\E[1m\E[33m\E[44m'</span></code></pre><blockquote><p>ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，<br>SSSS 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token string">"\eh"</span><span class="token keyword">:</span> backward-char<span class="token string">"\el"</span><span class="token keyword">:</span> forward-char<span class="token string">"\ej"</span><span class="token keyword">:</span> next-history<span class="token string">"\ek"</span><span class="token keyword">:</span> previous-history<span class="token string">"\eH"</span><span class="token keyword">:</span> backward-word<span class="token string">"\eL"</span><span class="token keyword">:</span> forward-word<span class="token string">"\eJ"</span><span class="token keyword">:</span> beginning-of-line<span class="token string">"\eK"</span><span class="token keyword">:</span> end-of-line</code></pre><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/Idnan/bash-guide">https://github.com/Idnan/bash-guide</a><br><a href="http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/">http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/</a><br><a href="https://ss64.com/bash/syntax-keyboard.html">https://ss64.com/bash/syntax-keyboard.html</a><br><a href="http://wiki.bash-hackers.org/commands/classictest">http://wiki.bash-hackers.org/commands/classictest</a><br><a href="https://www.ibm.com/developerworks/library/l-bash-test/index.html">https://www.ibm.com/developerworks/library/l-bash-test/index.html</a><br><a href="https://www.cyberciti.biz/faq/bash-loop-over-file/">https://www.cyberciti.biz/faq/bash-loop-over-file/</a><br><a href="https://linuxconfig.org/bash-scripting-tutorial">https://linuxconfig.org/bash-scripting-tutorial</a><br><a href="https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</a><br><a href="https://devhints.io/bash">https://devhints.io/bash</a><br><a href="https://github.com/jlevy/the-art-of-command-line">https://github.com/jlevy/the-art-of-command-line</a><br><a href="https://yq.aliyun.com/articles/68541">https://yq.aliyun.com/articles/68541</a></p>]]></content>
      
      
      <categories>
          
          <category> cheatsheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中文速查表</title>
      <link href="/posts/2718248761.html"/>
      <url>/posts/2718248761.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>本手册是 <a href="http://datasciencefree.com/python.pdf">Python cheat sheet</a> 的中文翻译版。原作者：Arianne Colton and Sean Chen(<a href="mailto:data.scientist.info@gmail.com">data.scientist.info@gmail.com</a>)</li><li>编译：<a href="https://github.com/ucasFL">ucasFL</a></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%B8%B8%E8%A7%84">常规</a></li><li><a href="#%E6%95%B0%E5%80%BC%E7%B1%BB%E7%B1%BB%E5%9E%8B">数值类类型</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E6%B5%81">控制流</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C">常见字符串操作</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a></li><li><a href="#%E5%88%97%E8%A1%A8%E3%80%81%E5%AD%97%E5%85%B8%E4%BB%A5%E5%8F%8A%E5%85%83%E7%BB%84%E7%9A%84%E6%8E%A8%E5%AF%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F">列表、字典以及元组的推导表达式</a></li><li><a href="#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">单元测试</a></li></ul><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><ul><li>Python 对大小写敏感</li><li>Python 的索引从 0 开始</li><li>Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号</li></ul><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><ul><li>获取主页帮助：<code>help()</code></li><li>获取函数帮助：<code>help(str.replace)</code></li><li>获取模块帮助：<code>help(re)</code></li></ul><h3 id="模块-库"><a href="#模块-库" class="headerlink" title="模块(库)"></a>模块(库)</h3><p>Python的模块只是一个简单地以 <code>.py</code> 为后缀的文件。</p><ul><li>列出模块内容：<code>dir(module1)</code></li><li>导入模块：<code>import module</code></li><li>调用模块中的函数：<code>module1.func1()</code></li></ul><blockquote><p><strong>注</strong>：<code>import</code>语句会创建一个新的命名空间(namespace)，并且在该命名空间内执行<code>.py</code>文件中的所有语句。如果你想把模块内容导入到当前命名空间，请使用<code>from module1 import *</code>语句。</p></blockquote><h2 id="数值类类型"><a href="#数值类类型" class="headerlink" title="数值类类型"></a>数值类类型</h2><p>查看变量的数据类型：<code>type(variable)</code></p><h3 id="六种经常使用的数据类型"><a href="#六种经常使用的数据类型" class="headerlink" title="六种经常使用的数据类型"></a>六种经常使用的数据类型</h3><ol><li><p><strong>int/long</strong>：过大的 <code>int</code> 类型会被自动转化为 <code>long</code> 类型</p></li><li><p><strong>float</strong>：64 位，Python 中没有 <code>double</code> 类型</p></li><li><p><strong>bool</strong>：真或假</p></li><li><p><strong>str</strong>：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码</p><ul><li><p>字符串可置于单/双/三引号中</p></li><li><p>字符串是字符的序列，因此可以像处理其他序列一样处理字符串</p></li><li><p>特殊字符可通过 <code>\</code> 或者前缀 <code>r</code> 实现：</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> r<span class="token string">'this\f?ff'</span></code></pre></li><li><p>字符串可通过多种方式格式化：</p><pre class=" language-python"><code class="language-python">template <span class="token operator">=</span> <span class="token string">'%.2f %s haha $%d'</span><span class="token punctuation">;</span>str1 <span class="token operator">=</span> template <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">4.88</span><span class="token punctuation">,</span> <span class="token string">'hola'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p><strong>NoneType(None)<strong>：Python “null”值（<code>None</code>对象</strong>只</strong>存在一个实例）</p><ul><li><p><code>None</code>不是一个保留关键字，而是<code>NoneType</code>的一个唯一实例</p></li><li><p><code>None</code>通常是可选函数参数的默认值：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre></li><li><p><code>None</code>的常见用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> variable <span class="token keyword">is</span> None <span class="token punctuation">:</span></code></pre></li></ul></li><li><p><strong>datetime</strong>：Python内置的<code>datetime</code>模块提供了<code>datetime</code>、<code>data</code>以及<code>time</code>类型。</p><ul><li><code>datetime</code>组合了存储于<code>date</code>和<code>time</code>中的信息</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从字符串中创建 datetime</span>dt1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'20091031'</span><span class="token punctuation">,</span> <span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取 date 对象</span>dt1<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取 time 对象</span>dt1<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将 datetime 格式化为字符串</span>dt1<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%m/%d/%Y%H:%M'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 更改字段值</span>dt2 <span class="token operator">=</span> dt1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 做差, diff 是一个 datetime.timedelta 对象</span>diff <span class="token operator">=</span> dt1 <span class="token operator">-</span> dt2</code></pre></li></ol><blockquote><p><strong>注</strong>：</p><ul><li><code>str</code>、<code>bool</code>、<code>int</code>和<code>float</code>同时也是显式类型转换函数。</li><li>除字符串和元组外，Python 中的绝大多数对象都是可变的。</li></ul></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p><strong>注</strong>：所有的“非只读(non-Get)”函数调用，比如下面例子中的<code>list1.sort()</code>，除非特别声明，都是原地操作(不会创建新的对象)。</p></blockquote><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是 Python 中任何类型的对象的一个一维、固定长度、<strong>不可变</strong>的序列。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建元组</span>tup1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建嵌套元组</span>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将序列或迭代器转化为元组</span>tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 连接元组</span>tup1 <span class="token operator">+</span> tup2<span class="token comment" spellcheck="true"># 解包元组</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> tup1</code></pre><p><strong>元组应用</strong>：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 交换两个变量的值</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是 Python 中任何类型的对象的一个一维、非固定长度、<strong>可变</strong>（比如内容可以被修改）的序列。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list1 <span class="token operator">=</span> list<span class="token punctuation">(</span>tup1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 连接列表</span>list1 <span class="token operator">+</span> list2list1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 追加到列表的末尾</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入指定位置</span>list1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>PosIndex<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反向插入，即弹出给定位置的值/删除</span>ValueAtIdx <span class="token operator">=</span> list1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>PosIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 移除列表中的第一个值, a 必须是列表中第一个值</span>list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 检查成员</span><span class="token number">3</span> <span class="token keyword">in</span> list1 <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">or</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 对列表进行排序</span>list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按特定方式排序</span>list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按长度排序</span></code></pre><blockquote><ul><li>使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用<code>extend()</code>是更明智的选择。</li><li><code>insert</code>和<code>append</code>相比会有更大的开支（时间/空间）。</li><li>在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。</li></ul></blockquote><h4 id="内置的bisect模块"><a href="#内置的bisect模块" class="headerlink" title="内置的bisect模块"></a>内置的<code>bisect</code>模块</h4><ul><li><p>对一个排序好的列表进行二分查找或插入</p></li><li><p><code>bisect.bisect</code>找到元素在列表中的位置，<code>bisect.insort</code>将元素插入到相应位置。</p></li><li><p>用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> bisectlist1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1</span>bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将 3.5 插入 list1 中合适位置</span>bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p><strong>注</strong>：<code>bisect</code> 模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。</p></blockquote><h3 id="针对序列类型的切片"><a href="#针对序列类型的切片" class="headerlink" title="针对序列类型的切片"></a>针对序列类型的切片</h3><blockquote><p>序列类型包括<code>str</code>、<code>array</code>、<code>tuple</code>、<code>list</code>等。</p></blockquote><p>用法：</p><pre class=" language-python"><code class="language-python">list1<span class="token punctuation">[</span>start<span class="token punctuation">:</span>stop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 如果使用 step</span>list1<span class="token punctuation">[</span>start<span class="token punctuation">:</span>stop<span class="token punctuation">:</span>step<span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：</p><ul><li>切片结果包含 <code>start</code> 索引，但不包含 <code>stop</code> 索引</li><li><code>start/stop</code> 索引可以省略，如果省略，则默认为序列从开始到结束，如 <code>list1 == list1[:]</code> 。</li></ul></blockquote><p><code>step</code> 的应用：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 取出奇数位置的元素</span>list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 反转字符串</span>str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="字典（哈希表）"><a href="#字典（哈希表）" class="headerlink" title="字典（哈希表）"></a>字典（哈希表）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 从序列创建字典</span>dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>KeyList<span class="token punctuation">,</span> ValueList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取/设置/插入元素</span>dict1<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span>dict1<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'NewValue'</span><span class="token comment" spellcheck="true"># get 提供默认值</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> DefaultValue<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 检查键是否存在</span><span class="token string">'key1'</span> <span class="token keyword">in</span> dict1<span class="token comment" spellcheck="true"># 获取键列表</span>dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取值列表</span>dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 更新值</span>dict1<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict1 的值被 dict2 替换</span></code></pre><blockquote><ul><li>如果键不存在，则会出现 <code>KeyError Exception</code> 。</li><li>当键不存在时，如果 <code>get()</code>不提供默认值则会返回 <code>None</code> 。</li><li>以相同的顺序返回键列表和值列表，但顺序不是特定的，也就是说极大可能非排序。</li></ul></blockquote><h4 id="有效字典键类型"><a href="#有效字典键类型" class="headerlink" title="有效字典键类型"></a>有效字典键类型</h4><ul><li>键必须是不可变的，比如标量类型(<code>int</code>、<code>float</code>、<code>string</code>)或者元组（元组中的所有对象也必须是不可变的）。</li><li>这儿涉及的技术术语是“可哈希(hashability)”。可以用函数<code>hash()</code>来检查一个对象是否是可哈希的，比如 <code>hash('This is a string')</code>会返回一个哈希值，而<code>hash([1,2])</code>则会报错（不可哈希）。</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li><p>一个集合是一些<strong>无序</strong>且唯一的元素的聚集；</p></li><li><p>你可以把它看成只有键的字典；</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建集合</span>set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 子集测试</span>set1<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 超集测试</span>set1<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试两个集合中的元素是否完全相同</span>set1 <span class="token operator">==</span> set2</code></pre></li><li><p><strong>集合操作</strong></p><ul><li>并（或）：<code>set1 | set2</code></li><li>交（与）：<code>set1 &amp; set2</code></li><li>差：<code>set1 - set2</code></li><li>对称差（异或）：<code>set1 ^ set2</code></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Python 的函数参数传递是通过<strong>引用传递</strong>。</p><ul><li><p>基本形式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>posArg1<span class="token punctuation">,</span> keywordArg1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>注</strong>：</p><ul><li>关键字参数必须跟在位置参数的后面；</li><li>默认情况下，Python 不会“延迟求值”，表达式的值会立刻求出来。</li></ul></blockquote></li><li><p>函数调用机制</p><ol><li>所有函数均位于模块内部作用域。见“模块”部分。</li><li>在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组<code>args</code>和一个字典<code>kwargs</code>，然后在函数内部解包。</li></ol></li><li><p>“函数是对象”的常见用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>ops <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">,</span> user_define_func<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> function <span class="token keyword">in</span> ops<span class="token punctuation">:</span>        value <span class="token operator">=</span> function<span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>如果函数直到结束都没有<code>return</code>语句，则返回<code>None</code>。</p></li><li><p>如果有多个返回值则通过<strong>一个</strong>元组来实现。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span>value1<span class="token punctuation">,</span> value2 <span class="token operator">=</span> func1<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="匿名函数（又称-LAMBDA-函数）"><a href="#匿名函数（又称-LAMBDA-函数）" class="headerlink" title="匿名函数（又称 LAMBDA 函数）"></a>匿名函数（又称 LAMBDA 函数）</h3><ul><li><p>什么是匿名函数？</p><p>  匿名函数是一个只包含一条语句的简单函数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># def func1(x) : return x * 2</span></code></pre></li><li><p>匿名函数的应用：“柯里化(curring)”，即利用已存在函数的部分参数来派生新的函数。</p><pre class=" language-python"><code class="language-python">ma60 <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>rolling_mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="一些有用的函数（针对数据结构）"><a href="#一些有用的函数（针对数据结构）" class="headerlink" title="一些有用的函数（针对数据结构）"></a>一些有用的函数（针对数据结构）</h3><ol><li><p><strong>Enumerate</strong> 返回一个序列<code>(i, value)</code>元组，<code>i</code> 是当前 <code>item</code> 的索引。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><ul><li>应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。</li></ul></li><li><p><strong>Sorted</strong> 可以从任意序列中返回一个排序好的序列。</p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><ul><li><p>应用：</p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span>set<span class="token punctuation">(</span><span class="token string">'abc bcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 返回一个字符串排序后无重复的字母序列</span></code></pre></li></ul></li><li><p><strong>Zip</strong> 函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。</p><pre class=" language-python"><code class="language-python">zip<span class="token punctuation">(</span>seq1<span class="token punctuation">,</span> seq2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'seq1_1'</span><span class="token punctuation">,</span> <span class="token string">'seq2_1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><ul><li><p><code>zip()</code>可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。</p></li><li><p>应用：多个序列同时迭代：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>seq1<span class="token punctuation">,</span> seq2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></li><li><p><code>unzip</code>：另一种思考方式是把一些行转化为一些列：</p><pre class=" language-python"><code class="language-python">seq1<span class="token punctuation">,</span> seq2 <span class="token operator">=</span> unzip<span class="token punctuation">(</span>zipOutput<span class="token punctuation">)</span></code></pre></li></ul></li><li><p><strong>Reversed</strong> 将一个序列的元素以逆序迭代。</p><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><code>reversed()</code> 会返回一个迭代器，<code>list()</code> 使之成为一个列表。</p></blockquote></li></ol><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><ol><li><p>用于 <code>if-else</code> 条件中的操作符：</p><pre class=" language-python"><code class="language-python">var1 <span class="token keyword">is</span> var2  <span class="token comment" spellcheck="true"># 检查两个变量是否是相同的对象</span>var1 <span class="token keyword">is</span> <span class="token operator">not</span> var2  <span class="token comment" spellcheck="true"># 检查两个变量是否是不同的对象</span>var1 <span class="token operator">==</span> var2  <span class="token comment" spellcheck="true"># 检查两个变量的值是否相等</span></code></pre><blockquote><p><strong>注</strong>：Python 中使用 <code>and</code>、<code>or</code>、<code>not</code> 来组合条件，而不是使用 <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 。</p></blockquote></li><li><p><code>for</code>循环的常见用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> element <span class="token keyword">in</span> iterator<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 可迭代对象（list、tuple）或迭代器</span>    <span class="token keyword">pass</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token keyword">in</span> iterator<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果元素是可以解包的序列</span>    <span class="token keyword">pass</span></code></pre></li><li><p><code>pass</code>：无操作语句，在不需要进行任何操作的块中使用。</p></li><li><p>三元表达式，又称简洁的 <code>if-else</code>，基本形式：</p><pre class=" language-python"><code class="language-python">value <span class="token operator">=</span> true<span class="token operator">-</span>expr <span class="token keyword">if</span> condition <span class="token keyword">else</span> false<span class="token operator">-</span>expr</code></pre></li><li><p>Python 中没有 <code>switch/case</code> 语句，请使用 <code>if/elif</code>。</p></li></ol><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ol><li><p><strong>对象</strong>是 Python 中所有类型的根。</p></li><li><p>万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个“类型(type)”。对象变量是一个指向变量在内存中位置的指针。</p></li><li><p>所有对象均会被<strong>引用计数</strong>。</p><pre class=" language-python"><code class="language-python">sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> xa <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token comment" spellcheck="true"># 上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span></code></pre></li><li><p>类的基本形式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 'self' 等价于 Java/C++ 中的 'this'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">memberFunc1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">classFunc2</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>obj1 <span class="token operator">=</span> MyObject<span class="token punctuation">(</span><span class="token string">'name1'</span><span class="token punctuation">)</span>obj1<span class="token punctuation">.</span>memberFunc1<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>MyObject<span class="token punctuation">.</span>classFunc2<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span></code></pre></li><li><p>有用的交互式工具：</p><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span>variable1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 列出对象的所有可用方法</span></code></pre></li></ol><h2 id="常见字符串操作"><a href="#常见字符串操作" class="headerlink" title="常见字符串操作"></a>常见字符串操作</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 通过分隔符连接列表/元组</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'v1'</span><span class="token punctuation">,</span> <span class="token string">'v2'</span><span class="token punctuation">,</span> <span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'v1, v2, v3'</span><span class="token comment" spellcheck="true"># 格式化字符串</span>string1 <span class="token operator">=</span> <span class="token string">'My name is {0}　{name}'</span>newString1 <span class="token operator">=</span> string1<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Sean'</span><span class="token punctuation">,</span> name <span class="token operator">=</span>　<span class="token string">'Chen'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分裂字符串</span>sep <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>stringList1 <span class="token operator">=</span>　string1<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取子串</span>start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>string1<span class="token punctuation">[</span>start<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 补 '0' 向右对齐字符串</span>month <span class="token operator">=</span> <span class="token string">'5'</span><span class="token punctuation">;</span>month<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'05'</span>month <span class="token operator">=</span> <span class="token string">'12'</span><span class="token punctuation">;</span>month<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'12'</span>month<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'012'</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ol><li><p>基本形式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span> e<span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> AnotherError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token comment" spellcheck="true"># 清理，比如 close db;</span></code></pre></li><li><p>手动引发异常：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">raise</span> AssertionError  <span class="token comment" spellcheck="true"># 断言失败</span><span class="token keyword">raise</span> SystemExit<span class="token comment" spellcheck="true"># 请求程序退出</span><span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'错误信息 :..'</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="列表、字典以及元组的推导表达式"><a href="#列表、字典以及元组的推导表达式" class="headerlink" title="列表、字典以及元组的推导表达式"></a>列表、字典以及元组的推导表达式</h2><p>使代码更加易读易写的语法糖。</p><ol><li><p><strong>列表推导</strong></p><ul><li><p>用一个简练的表达式，通过筛选一个数据集并且转换经过筛选的元素的方式来简明地生成新列表。</p></li><li><p>基本形式：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>expr <span class="token keyword">for</span> val <span class="token keyword">in</span> collection <span class="token keyword">if</span> condition<span class="token punctuation">]</span></code></pre></li></ul><p> 等价于</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> val <span class="token keyword">in</span> collection<span class="token punctuation">:</span>    <span class="token keyword">if</span> condition<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>expr<span class="token punctuation">)</span></code></pre><p> 可以省略过滤条件，只留下表达式。</p></li><li><p><strong>字典推导</strong></p><ul><li><p>基本形式：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>key<span class="token operator">-</span>expr <span class="token punctuation">:</span> value<span class="token operator">-</span>expr <span class="token keyword">for</span> value <span class="token keyword">in</span> collection <span class="token keyword">if</span> condition<span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>集合推导</strong></p><ul><li>基本形式：和列表推导一样，不过是用 <code>()</code> 而不是 <code>[]</code> 。</li></ul></li><li><p><strong>嵌套列表</strong></p><ul><li><p>基本形式：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>expr <span class="token keyword">for</span> val <span class="token keyword">in</span> collection <span class="token keyword">for</span> innerVal <span class="token keyword">in</span> val <span class="token keyword">if</span> condition<span class="token punctuation">]</span></code></pre></li></ul></li></ol><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>Python自带<code>unittest</code>模块，可供我们编写单元测试。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest</code></pre><p>我们可以编写继承于<code>unittest.TestCase</code>测试类的子类，并在子类中编写具体的测试函数。测试函数命必须以<code>test_</code>开头，否则不会被识别为测试函数，进而不会在运行单元测试时被运行。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestSubclass</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 可以通过msg关键字参数提供测试失败时的提示消息</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">'modified message'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertGreater<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIn<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试是否会抛出异常</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>            _ <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 被@unittest.skip装饰器装饰的测试类或测试函数会被跳过</span>    @unittest<span class="token punctuation">.</span>skip<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">'just skip'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_skip</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'I shall never be tested'</span><span class="token punctuation">)</span></code></pre><p>另外，<code>unittest.TestCase</code>中还有两个特殊的成员函数，他们分别会在调用每一个测试函数的前后运行。在测试前连接数据库并在测试完成后断开连接是一种常见的使用场景。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># To do: connect to the database</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># To do: release the connection</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">test_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># To do: test the database</span>    <span class="token keyword">pass</span></code></pre><p>测试类编写完毕后，可以通过添加以下代码来将当前文件当成正常的Python脚本使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cheatsheet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux管理Python版本</title>
      <link href="/posts/398695014.html"/>
      <url>/posts/398695014.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不同的脚本，项目需要用的Python版本不一定是相同的。那怎么让多个版本共存，并且可以任意切换呢？</p><p>下面介绍了两种方法，<code>Ubuntu</code>应该是两种都适用的，<code>MacOS</code>实测适用方法二。</p><h2 id="方法一：update-alternatives"><a href="#方法一：update-alternatives" class="headerlink" title="方法一：update-alternatives"></a>方法一：update-alternatives</h2><p><code>update-alternatives</code>命令用于处理 Linux 系统中软件版本的切换，使其多版本共存。（update-alternatives可以管理很多软件的版本切换，这里介绍下以python为例）<br>使用这种方法管理python版本需要和apt一起使用。<br>首先系统自带的python版本是3.6.9，现在需要一个<code>&gt;=3.7</code>的版本。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> python3.7</code></pre><p>此时python3.7已经安装，但默认命令python3指向的还是3.6.9，下面切换python的默认指向。</p><h3 id="切换默认指向"><a href="#切换默认指向" class="headerlink" title="切换默认指向"></a>切换默认指向</h3><p>使用update-alternatives，给python版本编号。<br>要先安装update-alternatives，先添加两个指向。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1<span class="token function">sudo</span> update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2</code></pre><p>然后确定默认指向，执行以下命令后选择2即可（后面可以随时输入这条命令切换版本）。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --config python3</code></pre><p>这样就完成了python的版本切换。  </p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ul><li>优点：安装比较方便，比较适合对python版本要求不是很严格的用户。  </li><li>缺点：apt支持的python版本有限，特别新的版本一般是没有的。</li></ul><h2 id="方法二：Pyenv"><a href="#方法二：Pyenv" class="headerlink" title="方法二：Pyenv"></a>方法二：Pyenv</h2><p><a href="https://github.com/pyenv/pyenv">pyenv</a>做什么…</p><ul><li>允许您基于每个用户更改全局 Python 版本。</li><li>为每个项目的 Python 版本提供支持。</li><li>允许您使用环境变量覆盖 Python 版本。</li><li>一次搜索来自多个 Python 版本的命令。</li></ul><p>简单来说就是一个简单的Python版本管理器，可以轻松地在各个Python版本之间进行切换。<br>Github 30.8k Star,有点东西。。</p><h3 id="安装（推荐手动安装）："><a href="#安装（推荐手动安装）：" class="headerlink" title="安装（推荐手动安装）："></a>安装（推荐手动安装）：</h3><h4 id="自动安装（需要梯子）"><a href="#自动安装（需要梯子）" class="headerlink" title="自动安装（需要梯子）:"></a>自动安装（需要梯子）:</h4><pre class=" language-bash"><code class="language-bash">curl https://pyenv.run <span class="token operator">|</span> <span class="token function">bash</span></code></pre><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装:"></a>手动安装:</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># clone,编译</span><span class="token function">git</span> clone https://github.com/pyenv/pyenv.git ~/.pyenv<span class="token function">cd</span> ~/.pyenv <span class="token operator">&amp;&amp;</span> src/configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> -C src<span class="token comment" spellcheck="true"># 配置环境变量</span><span class="token keyword">echo</span> <span class="token string">'export PYENV_ROOT="<span class="token variable">$HOME</span>/.pyenv"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token keyword">echo</span> <span class="token string">'command -v pyenv >/dev/null || export PATH="<span class="token variable">$PYENV_ROOT</span>/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token keyword">echo</span> <span class="token string">'eval "<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token function">source</span> ~/.bashrc</code></pre><p>然后测试一下，打印出版本就是安装成功了。</p><pre class=" language-bash"><code class="language-bash">$ pyenv -v$ pyenv 2.3.17-5-ga57e0b50</code></pre><h4 id="使用介绍："><a href="#使用介绍：" class="headerlink" title="使用介绍："></a>使用介绍：</h4><pre class=" language-bash"><code class="language-bash">$ pyenvpyenv 2.3.17-5-ga57e0b50Usage: pyenv <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">></span><span class="token punctuation">]</span>Some useful pyenv commands are:   --version   Display the version of pyenv   commands    List all available pyenv commands   <span class="token function">exec</span>        Run an executable with the selected Python version   global      Set or show the global Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token function">help</span>        Display <span class="token function">help</span> <span class="token keyword">for</span> a <span class="token function">command</span>   hooks       List hook scripts <span class="token keyword">for</span> a given pyenv <span class="token function">command</span>   init        Configure the shell environment <span class="token keyword">for</span> pyenv   <span class="token function">install</span>     Install a Python version using python-build   latest      Print the latest installed or known version with the given prefix   local       Set or show the local application-specific Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   prefix      Display prefixes <span class="token keyword">for</span> Python versions   rehash      Rehash pyenv shims <span class="token punctuation">(</span>run this after installing executables<span class="token punctuation">)</span>   root        Display the root directory where versions and shims are kept   shell       Set or show the shell-specific Python version   shims       List existing pyenv shims   uninstall   Uninstall Python versions   version     Show the current Python version<span class="token punctuation">(</span>s<span class="token punctuation">)</span> and its origin   version-file   Detect the <span class="token function">file</span> that sets the current pyenv version   version-name   Show the current Python version   version-origin   Explain how the current Python version is <span class="token keyword">set</span>   versions    List all Python versions available to pyenv   whence      List all Python versions that contain the given executable   <span class="token function">which</span>       Display the full path to an executableSee `pyenv <span class="token function">help</span> <span class="token operator">&lt;</span>command<span class="token operator">></span>' <span class="token keyword">for</span> information on a specific command.</code></pre><p>虽然它有一大堆命令，但实际使用频率高的命令并不多，主要有以下几个：</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>pyenv versions</code></td><td>列出系统当前所有的python版本</td></tr><tr><td><code>pyenv version</code></td><td>打印系统当前python版本</td></tr><tr><td><code>pyenv install</code></td><td>安装指定版本</td></tr><tr><td><code>pyenv global</code></td><td>设置python版本</td></tr><tr><td><code>pyenv uninstall</code></td><td>卸载指定版本</td></tr></tbody></table><h4 id="查找需要安装的Python版本："><a href="#查找需要安装的Python版本：" class="headerlink" title="查找需要安装的Python版本："></a>查找需要安装的Python版本：</h4><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> -l  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.  3.8.2  3.8.3  3.8.4  3.8.5  3.8.6  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.  3.9.1  3.9.2  3.9.4  <span class="token punctuation">..</span>.  <span class="token punctuation">..</span>.</code></pre><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><p>找到自己需要的版本，pyenv默认从python官网下载tar包，国内访问速度很慢，timeout也正常。可以考虑换国内镜像，方法放在后面。</p><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> 3.x.x</code></pre><p>这样就算安装完成了。</p><h4 id="切换版本："><a href="#切换版本：" class="headerlink" title="切换版本："></a>切换版本：</h4><pre class=" language-bash"><code class="language-bash">$ pyenv versions*  system  3.8.5 <span class="token punctuation">(</span>set by /root/.pyenv/version<span class="token punctuation">)</span>$ pyenv global 3.8.5$ pyenv version3.8.5 <span class="token punctuation">(</span>set by /root/.pyenv/version<span class="token punctuation">)</span></code></pre><p>（注意切换回系统自带版本的时候， <code>pyenv global system</code>）  </p><h3 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h3><p>这里我使用的是淘宝的源 <code>https://npm.taobao.org/mirrors/python/</code><br>pyenv 没有配置源地址的地方，不过我们可以变通一下。<br>它安装 Python 的流程就是先将把包下载到 <code>~/.pyenv/cache</code> 目录，然后在进行安装，慢也就慢在下载的这个过程。<br>先手动将包下载到指定目录，再执行 pyenv install 即可。<br>可以精简为一个shll命令：  </p><pre class=" language-bash"><code class="language-bash">v<span class="token operator">=</span>3.8.5<span class="token punctuation">;</span> curl -L https://npm.taobao.org/mirrors/python/<span class="token variable">$v</span>/Python-<span class="token variable">$v</span>.tar.xz -o ~/.pyenv/cache/Python-<span class="token variable">$v</span>.tar.xz<span class="token punctuation">;</span> pyenv <span class="token function">install</span> <span class="token variable">$v</span></code></pre><p>或者  </p><h4 id="一劳永逸："><a href="#一劳永逸：" class="headerlink" title="一劳永逸："></a>一劳永逸：</h4><p>可以写在~/.bashrc </p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> pyinstall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v<span class="token operator">=</span><span class="token variable">$1</span>    <span class="token keyword">echo</span> <span class="token string">'准备安装 Python'</span> <span class="token variable">$v</span>    curl -L https://npm.taobao.org/mirrors/python/<span class="token variable">$v</span>/Python-<span class="token variable">$v</span>.tar.xz -o ~/.pyenv/cache/Python-<span class="token variable">$v</span>.tar.xz    pyenv <span class="token function">install</span> <span class="token variable">$v</span><span class="token punctuation">}</span></code></pre><p>写在<code>~/.bashrc</code> 保存，使改动生效<code>source ~/.bashrc</code> 。<br>对了，第一次运行的话，需要在pyenv下创建一下缓存目录：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/.pyenv/cache</code></pre><h4 id="使用换源的安装命令："><a href="#使用换源的安装命令：" class="headerlink" title="使用换源的安装命令："></a>使用换源的安装命令：</h4><pre class=" language-bash"><code class="language-bash">$ pyinstall 3.9.16准备安装 Python 3.9.16  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100   145  100   145    0     0    184      0 --:--:-- --:--:-- --:--:--   184100 18.8M  100 18.8M    0     0  1933k      0  0:00:09  0:00:09 --:--:-- 2361kInstalling Python-3.9.16<span class="token punctuation">..</span>.Installed Python-3.9.16 to /root/.pyenv/versions/3.9.16</code></pre><p>其他指令还是和原来一样的。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: EACCES: permission denied 解决方法</title>
      <link href="/posts/2498748118.html"/>
      <url>/posts/2498748118.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用npm命令时报错误Error-EACCES-permission-denied，如何解决？"><a href="#使用npm命令时报错误Error-EACCES-permission-denied，如何解决？" class="headerlink" title="使用npm命令时报错误Error: EACCES: permission denied，如何解决？"></a>使用npm命令时报错误Error: EACCES: permission denied，如何解决？</h1><h2 id="报错信息如下："><a href="#报错信息如下：" class="headerlink" title="报错信息如下："></a>报错信息如下：</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/lib/node_modules<span class="token function">npm</span> ERR<span class="token operator">!</span> path /usr/lib/node_modules<span class="token function">npm</span> ERR<span class="token operator">!</span> code EACCES<span class="token function">npm</span> ERR<span class="token operator">!</span> errno -13<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall access<span class="token function">npm</span> ERR<span class="token operator">!</span> Error: EACCES: permission denied, access <span class="token string">'/usr/lib/node_modules'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>  <span class="token punctuation">{</span> Error: EACCES: permission denied, access <span class="token string">'/usr/lib/node_modules'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>   stack: <span class="token string">'Error: EACCES: permission denied, access \'/usr/lib/node_modules\''</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   errno: -13,<span class="token function">npm</span> ERR<span class="token operator">!</span>   code: <span class="token string">'EACCES'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   syscall: <span class="token string">'access'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   path: <span class="token string">'/usr/lib/node_modules'</span> <span class="token punctuation">}</span><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> Please try running this <span class="token function">command</span> again as root/Administrator.</code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>官方也提供了一种方法，但是比较繁琐。。<br>还有一种方法，改变npm默认的路径。<br>进入终端，依次输入一下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建global安装任务的目录</span>$ <span class="token function">mkdir</span> ~/.npm-global<span class="token comment" spellcheck="true"># 配置npm使用新的目录</span>$ <span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">'~/.npm-global'</span><span class="token comment" spellcheck="true"># 在~/.bashrc文件中增加配置</span>$ <span class="token function">export</span> PATH<span class="token operator">=</span>~/.npm-global/bin:<span class="token variable">$PATH</span><span class="token comment" spellcheck="true"># 配置文件立即生效</span>$ <span class="token function">source</span> ~/.bashrc<span class="token comment" spellcheck="true"># 重新执行命令</span>$ <span class="token function">npm</span> <span class="token function">install</span> -g xxxx </code></pre><p>有没有解决你的问题呢？</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速搭建自己的专属博客</title>
      <link href="/posts/3267187531.html"/>
      <url>/posts/3267187531.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>记录下博客搭建过程，首先介绍下搭建的框架：<br><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架,Hexo 使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><p>介绍完了，下面开始搭建喽！</p><h2 id="二、博客环境搭建"><a href="#二、博客环境搭建" class="headerlink" title="二、博客环境搭建"></a>二、博客环境搭建</h2><p>我的系统是<code>macOs</code>，和<code>linux</code>的操作基本没差别。</p><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p><a href="https://nodejs.org/en/download">Node.js</a>官网下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后就是打开安装包，按照引导一步一步进行就好了。<br>安装好后，在命令行执行 <code>node -v</code> 和 <code>npm -v</code>，打印出版本号就是安装成功了。</p><pre class=" language-bash"><code class="language-bash">$ node -v$ v18.16.0$ <span class="token function">npm</span> -v$ 9.5.1</code></pre><h4 id="npm-error"><a href="#npm-error" class="headerlink" title="npm error"></a>npm error</h4><p>在使用npm的时候可能会有一个问题 <a href="/posts/2498748118.html" title="Error: EACCES: permission denied 解决方法">Error: EACCES: permission denied</a>，遇到的可以看一下。</p><h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><p>命令行安装即可。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>其他 <code>linux</code> ，比如<code>Ubuntu</code> :</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span></code></pre><h3 id="3-github配置"><a href="#3-github配置" class="headerlink" title="3.github配置"></a>3.github配置</h3><p>首先没有<a href="https://github.com/">github</a>账号的，要去注册下github的账号。 </p><p>然后新建代码仓库，注意代码仓库的名字一定要是这样<code>&lt;your github name&gt;.github.io</code>.  </p><p>接下来在github添加你的SSH Key，因为要频繁的push代码，如果走https的方式，每次都需要输入账号密码，非常麻烦。而采用ssh的方式，就不再需要输入，只需要在github自己账号下配置一个ssh key即可。</p><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><p>git使用SSH配置， 初始需要以下三个步骤：</p><ul><li>使用秘钥生成工具生成rsa秘钥和公钥</li><li>将rsa公钥添加到代码托管平台</li><li>将rsa秘钥添加到ssh-agent中，为ssh client指定使用的秘钥文件</li></ul><p>具体操作如下：</p><h5 id="a-检查本地主机是否已经存在ssh-key"><a href="#a-检查本地主机是否已经存在ssh-key" class="headerlink" title="a.检查本地主机是否已经存在ssh key"></a>a.检查本地主机是否已经存在ssh key</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span></code></pre><p>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key，直接跳到3。</p><h5 id="b-生成ssh-key"><a href="#b-生成ssh-key" class="headerlink" title="b.生成ssh key"></a>b.生成ssh key</h5><p>如果不存在ssh key，使用如下命令生成:</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"xxx@xxx.com"</span><span class="token comment" spellcheck="true"># 执行后一直回车即可</span></code></pre><h5 id="c-获取ssh-key公钥内容（id-rsa-pub）"><a href="#c-获取ssh-key公钥内容（id-rsa-pub）" class="headerlink" title="c.获取ssh key公钥内容（id_rsa.pub）"></a>c.获取ssh key公钥内容（id_rsa.pub）</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">cat</span> id_rsa.pub</code></pre><p>这时会打印<code>id_rsa.pub</code>的内容，复制一下。  </p><h5 id="d-Github账号上添加公钥"><a href="#d-Github账号上添加公钥" class="headerlink" title="d.Github账号上添加公钥"></a>d.Github账号上添加公钥</h5><p>github右上角头像-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH key<br>把刚才复制的内容粘贴上去保存即可。</p><h5 id="e-验证是否设置成功"><a href="#e-验证是否设置成功" class="headerlink" title="e.验证是否设置成功"></a>e.验证是否设置成功</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.comWelcome to Github, @xxx<span class="token operator">!</span></code></pre><p>显示欢迎信息表明设置成功。设置成功后，即可不需要账号密码clone和push代码。<br>接下来在本地设置git信息。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你注册时的邮箱"</span></code></pre><h2 id="三、博客初始化"><a href="#三、博客初始化" class="headerlink" title="三、博客初始化"></a>三、博客初始化</h2><p>安装好node.js后，第一次使用npm可能会报错，可以参考<a href="#npm-error">npm error</a>。<br>1.给npm换国内源，提升下速度。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npmmirror.com</code></pre><p>2.命令行安装hexo （安装博客框架）</p><p>命令：<code>npm install -g hexo-cli</code></p><p>安装后验证：<code>hexo -v</code> 出现版本号说明安装成功</p><p>3.在本地新建一个名为blog的目录（位置、名字随意），比如我的是~/blog。<br>命令：<code>mkdir -p ~/blog</code></p><p>4.这个路径将来就作为你存放代码的地方，所以最好不要随便放</p><p><code>hexo init</code> 初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等</p><p><code>hexo g</code> 生成命令</p><p><code>hexo s</code> 启动服务<br>说明：<code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到内容，说明博客初始化以及成功！</p><p>到此博客的本地初始化便完成了，接下来设置下博客的部署地址,推送博客到github。</p><h2 id="四、部署博客到Github"><a href="#四、部署博客到Github" class="headerlink" title="四、部署博客到Github"></a>四、部署博客到Github</h2><h3 id="1-安装git插件"><a href="#1-安装git插件" class="headerlink" title="1.安装git插件"></a>1.安装git插件</h3><p>在<code>~/blog</code>目录下安装 <code>hexo-deployer-git</code> 插件。 </p><p>命令：<code>npm install hexo-deployer-git --save</code>  </p><p>说明：必须安装，否则执行<code>hexo d</code> 的话会报错</p><h3 id="2-设置部署仓库地址"><a href="#2-设置部署仓库地址" class="headerlink" title="2.设置部署仓库地址"></a>2.设置部署仓库地址</h3><p>编辑<code>~/blog</code>目录下的 _config.yml 文件, 在文件末尾修改配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> github上对应仓库的ssh链接，如：     git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre><p>注意：现在github的主分支是<code>main</code>。</p><h3 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h3><p><code>hexo d</code> 推送代码到远程仓库。<br>一些顺利的话，大概几分钟后，在浏览器输入<code>username.github.io</code> 就可以看到你的博客了，就算本地电脑关机也没事。<br>常用命令说明：  </p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo s</code></td><td>本地预览</td></tr><tr><td><code>hexo clean</code></td><td>清除本地项目</td></tr><tr><td><code>hexo g</code></td><td>重新生成</td></tr><tr><td><code>hexo d</code></td><td>推送代码</td></tr></tbody></table><h2 id="五、主题下载与安装"><a href="#五、主题下载与安装" class="headerlink" title="五、主题下载与安装"></a>五、主题下载与安装</h2><p>我用的是 <code>hexo-theme-matery</code> 主题。<br>在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class=" language-bash"><code class="language-bash">hexo new page 404</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="添加中文繁简转换"><a href="#添加中文繁简转换" class="headerlink" title="添加中文繁简转换"></a>添加中文繁简转换</h3><p>在主题的 <code>_config.yml</code> 文件中，开启 translate 为 enable。</p><blockquote><p>开启中文繁简转换如下修改。默认不开启。<br>实例演示： <a href="https://blog.17lai.site/">繁简转换</a> 底下 footer 栏</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">translate</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span></code></pre><p>可能在播放某些歌曲的时候会报错：<br><code>An auido error has occurred,player will skip forward in 2 seconds</code><br>这是因为没有播放器没有获取到音乐文件，除了网络问题外，大概率是因为版权问题。</p><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），<code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）。</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code>即为这串数字。</p></blockquote><h2 id="六、文章-Front-matter-介绍"><a href="#六、文章-Front-matter-介绍" class="headerlink" title="六、文章 Front-matter 介绍"></a>六、文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-04-10 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Wyx<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> false 目录<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="七、主题自定义修改"><a href="#七、主题自定义修改" class="headerlink" title="七、主题自定义修改"></a>七、主题自定义修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题自带 <code>7</code> 张图片，默认逻辑是根据周一到周日每天动态切换一张。<br><code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以尝试下换个逻辑，每次刷新随机切换 <code>banner</code>(图片数量四个字需替换为你实际的图片数):</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bannerUrl <span class="token operator">=</span> <span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 图片数量<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url('</span> <span class="token operator">+</span> bannerUrl <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里推荐一个 <code>banner</code> 素材的网站<a href="https://pixabay.com/">pixabay</a>，免费，质量也还可以。<br>选择 <code>1280 x ***</code>大小的即可作为 <code>banner</code>，下载后按顺序重命名为 <code>0.jpg</code> <code>1.gpg</code> <code>2.jpg</code> <code>*.jpg</code>······ 数字按顺序排列，最后放在 <code>/source/medias/banner</code>即可。</p><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
